/*
 * lifo.c
 *
 *  Created on: Aug 23, 2023
 *      Author: andre
 */

#include "lifo.h"

LIFO_status LIFO_Init(LIFO_Buf_t* lifo_buf, uint32* buf, uint32 length){
	if(buf == NULL)
		return LIFO_Null;
	lifo_buf->base =buf;
	lifo_buf->count = 0;
	lifo_buf->head = buf;
	lifo_buf->length = length;


	return LIFO_no_error;
}

LIFO_status LIFO_Push_Item(LIFO_Buf_t* lifo_buf, uint32 item){
	// check LIFO is valid
	if (!lifo_buf->base || !lifo_buf->head)
		return LIFO_Null;
	// check LIFO is full
	if(lifo_buf->count >= lifo_buf->length)
		return LIFO_full;
	// add item and increment head
	*(lifo_buf->head) = item;
	lifo_buf->head++;
	lifo_buf->count++;

	return LIFO_no_error;
}

LIFO_status LIFO_Pop_Item(LIFO_Buf_t* lifo_buf, uint32* item){
	// check LIFO is valid
	if (!lifo_buf->base || !lifo_buf->head)
		return LIFO_Null;
	// check LIFO is empty
	if(lifo_buf->count <= 0)
		return LIFO_empty;
	*item = *(--lifo_buf->head);
	lifo_buf->count--;
	return LIFO_no_error;
}

LIFO_Buf_status FIFO_print(LIFO_Buf_t* fifo){
	element_type i;
	printf("Printing Elements in buffer:\n");
	// check// if fifo is empty
	if (fifo->count <= 0) {
		printf("FIFO is empty");
		return FIFO_empty;
	}

	int x;
	printf("============FIFO Print============\n");
	for (i = 0; i < fifo->count; ++i) {
		// circular from tail to head
		x = ( (fifo->tail - fifo->base) + (i * sizeof(element_type)) ) % (fifo->length * sizeof(element_type));
		printf("\t element(%d) = (%d)\n",(x/sizeof(element_type)) , *(fifo->base + x));
	}
	printf("==================================\n");
	return FIFO_no_error;
}
