
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c14  08000c14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c20  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08000c54  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000c54  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c48  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009e1  00000000  00000000  00023c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000968  00000000  00000000  0002467e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00024fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000140  00000000  00000000  00025180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000219d  00000000  00000000  000252c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003015  00000000  00000000  0002745d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007cee  00000000  00000000  0002a472  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004dc  00000000  00000000  000321dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bfc 	.word	0x08000bfc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08000bfc 	.word	0x08000bfc

08000170 <KP_delay>:
};

uint16_t Key_padCol[] = {C0, C1, C2, C3};
uint16_t Key_padRow[] = {R0, R1, R2, R3};
void KP_delay(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	int i,j;
	for (i = 0; i < x; ++i) {
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00c      	b.n	8000198 <KP_delay+0x28>
		for (j = 0; j < 1000; ++j);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <KP_delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000190:	dbf8      	blt.n	8000184 <KP_delay+0x14>
	for (i = 0; i < x; ++i) {
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3301      	adds	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	429a      	cmp	r2, r3
 800019e:	dbee      	blt.n	800017e <KP_delay+0xe>
	}
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <KEYPAD_8PINS_Config>:
GPIO_PinConfig_t PinConfig;
void KEYPAD_8PINS_Config(uint32_t MODE, uint32_t SPEED)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
//
//	PinConfig.GPIO_PIN = R3;
//	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
////	PinConfig.GPIO_Output_Speed = SPEED;
//	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
	PinConfig.GPIO_PIN = R0;
 80001b6:	4b3e      	ldr	r3, [pc, #248]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b3b      	ldr	r3, [pc, #236]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001c2:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b39      	ldr	r3, [pc, #228]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001cc:	4938      	ldr	r1, [pc, #224]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001ce:	4839      	ldr	r0, [pc, #228]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 80001d0:	f000 fb09 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = R1;
 80001d4:	4b36      	ldr	r3, [pc, #216]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b34      	ldr	r3, [pc, #208]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001e0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80001ea:	4931      	ldr	r1, [pc, #196]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001ec:	4831      	ldr	r0, [pc, #196]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 80001ee:	f000 fafa 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = R2;
 80001f2:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001f4:	2208      	movs	r2, #8
 80001f6:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80001fe:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b2a      	ldr	r3, [pc, #168]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000208:	4929      	ldr	r1, [pc, #164]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800020a:	482a      	ldr	r0, [pc, #168]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 800020c:	f000 faeb 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = R3;
 8000210:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000212:	2210      	movs	r2, #16
 8000214:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800021c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000224:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000226:	4922      	ldr	r1, [pc, #136]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000228:	4822      	ldr	r0, [pc, #136]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 800022a:	f000 fadc 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = C0;
 800022e:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000230:	2220      	movs	r2, #32
 8000232:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800023a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000242:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000244:	491a      	ldr	r1, [pc, #104]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000246:	481b      	ldr	r0, [pc, #108]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 8000248:	f000 facd 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = C1;
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800024e:	2240      	movs	r2, #64	; 0x40
 8000250:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000258:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000260:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000262:	4913      	ldr	r1, [pc, #76]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000264:	4813      	ldr	r0, [pc, #76]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 8000266:	f000 fabe 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = C2;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000276:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800027e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 8000284:	f000 faaf 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = C3;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800028a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800028e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 8000296:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 800029e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinConfig);
 80002a0:	4903      	ldr	r1, [pc, #12]	; (80002b0 <KEYPAD_8PINS_Config+0x104>)
 80002a2:	4804      	ldr	r0, [pc, #16]	; (80002b4 <KEYPAD_8PINS_Config+0x108>)
 80002a4:	f000 fa9f 	bl	80007e6 <MCAL_GPIO_Init>
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000048 	.word	0x20000048
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <Keypad_init>:

void Keypad_init()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	KEYPAD_8PINS_Config(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_10M);
 80002bc:	2101      	movs	r1, #1
 80002be:	2004      	movs	r0, #4
 80002c0:	f7ff ff74 	bl	80001ac <KEYPAD_8PINS_Config>
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0x1FF);
 80002c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <Keypad_init+0x1c>)
 80002ca:	f000 fb36 	bl	800093a <MCAL_GPIO_WritePort>
//	KEYPAD_PORT = 0xFF;

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <Keypad_getkey>:
char Keypad_getkey()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	int i=0,j=0;
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]
//	Keypad_init();
	for (i=0;i<4;i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e052      	b.n	8000392 <Keypad_getkey+0xba>
	{
//		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
//		KEYPAD_PORT &= ~(1<<Key_padCol[i]);

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80002ec:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <Keypad_getkey+0xcc>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	482c      	ldr	r0, [pc, #176]	; (80003a8 <Keypad_getkey+0xd0>)
 80002f6:	f000 fb09 	bl	800090c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80002fa:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <Keypad_getkey+0xcc>)
 80002fc:	885b      	ldrh	r3, [r3, #2]
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	4829      	ldr	r0, [pc, #164]	; (80003a8 <Keypad_getkey+0xd0>)
 8000304:	f000 fb02 	bl	800090c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000308:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <Keypad_getkey+0xcc>)
 800030a:	889b      	ldrh	r3, [r3, #4]
 800030c:	2201      	movs	r2, #1
 800030e:	4619      	mov	r1, r3
 8000310:	4825      	ldr	r0, [pc, #148]	; (80003a8 <Keypad_getkey+0xd0>)
 8000312:	f000 fafb 	bl	800090c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000316:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <Keypad_getkey+0xcc>)
 8000318:	88db      	ldrh	r3, [r3, #6]
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	4822      	ldr	r0, [pc, #136]	; (80003a8 <Keypad_getkey+0xd0>)
 8000320:	f000 faf4 	bl	800090c <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000324:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <Keypad_getkey+0xcc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032c:	2200      	movs	r2, #0
 800032e:	4619      	mov	r1, r3
 8000330:	481d      	ldr	r0, [pc, #116]	; (80003a8 <Keypad_getkey+0xd0>)
 8000332:	f000 faeb 	bl	800090c <MCAL_GPIO_WritePin>

		for (j=0;j<4;j++)
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	e024      	b.n	8000386 <Keypad_getkey+0xae>
		{
			KP_delay(5);
 800033c:	2005      	movs	r0, #5
 800033e:	f7ff ff17 	bl	8000170 <KP_delay>
			if ( MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == GPIO_PIN_RESET )
 8000342:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <Keypad_getkey+0xd4>)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034a:	4619      	mov	r1, r3
 800034c:	4816      	ldr	r0, [pc, #88]	; (80003a8 <Keypad_getkey+0xd0>)
 800034e:	f000 fac9 	bl	80008e4 <MCAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d113      	bne.n	8000380 <Keypad_getkey+0xa8>
			{
				while( MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == GPIO_PIN_RESET );
 8000358:	bf00      	nop
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <Keypad_getkey+0xd4>)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000362:	4619      	mov	r1, r3
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <Keypad_getkey+0xd0>)
 8000366:	f000 fabd 	bl	80008e4 <MCAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f4      	beq.n	800035a <Keypad_getkey+0x82>
				return KeysValues[j][i];
 8000370:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <Keypad_getkey+0xd8>)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	441a      	add	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	e00c      	b.n	800039a <Keypad_getkey+0xc2>
		for (j=0;j<4;j++)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	ddd7      	ble.n	800033c <Keypad_getkey+0x64>
	for (i=0;i<4;i++)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3301      	adds	r3, #1
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b03      	cmp	r3, #3
 8000396:	dda9      	ble.n	80002ec <Keypad_getkey+0x14>

			}
		}
	}
	return 'N';
 8000398:	234e      	movs	r3, #78	; 0x4e
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000010 	.word	0x20000010
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	20000018 	.word	0x20000018
 80003b0:	20000000 	.word	0x20000000

080003b4 <delay>:
#include "LCD.h"
//#define F_CPU 1000000UL
//#include <stdio.h>

void delay(int x)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	int i,j;
	for (i = 0; i < x; ++i) {
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e00c      	b.n	80003dc <delay+0x28>
		for (j = 0; j < 1000; ++j);
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e002      	b.n	80003ce <delay+0x1a>
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003d4:	dbf8      	blt.n	80003c8 <delay+0x14>
	for (i = 0; i < x; ++i) {
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbee      	blt.n	80003c2 <delay+0xe>
	}
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <LCD_8PINS_Config>:

GPIO_PinConfig_t PinConfig;

//
void LCD_8PINS_Config(uint32_t MODE, uint32_t SPEED)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	PinConfig.GPIO_PIN = GPIO_PIN_0;
 80003fa:	4b3e      	ldr	r3, [pc, #248]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b3b      	ldr	r3, [pc, #236]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000406:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800040e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000410:	4938      	ldr	r1, [pc, #224]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000412:	4839      	ldr	r0, [pc, #228]	; (80004f8 <LCD_8PINS_Config+0x108>)
 8000414:	f000 f9e7 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_1;
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800041a:	2202      	movs	r2, #2
 800041c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000424:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800042c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800042e:	4931      	ldr	r1, [pc, #196]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000430:	4831      	ldr	r0, [pc, #196]	; (80004f8 <LCD_8PINS_Config+0x108>)
 8000432:	f000 f9d8 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_2;
 8000436:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000438:	2204      	movs	r2, #4
 800043a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000442:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800044a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800044c:	4929      	ldr	r1, [pc, #164]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800044e:	482a      	ldr	r0, [pc, #168]	; (80004f8 <LCD_8PINS_Config+0x108>)
 8000450:	f000 f9c9 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_3;
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000456:	2208      	movs	r2, #8
 8000458:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000460:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000468:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800046a:	4922      	ldr	r1, [pc, #136]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800046c:	4822      	ldr	r0, [pc, #136]	; (80004f8 <LCD_8PINS_Config+0x108>)
 800046e:	f000 f9ba 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_4;
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000474:	2210      	movs	r2, #16
 8000476:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800047e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000486:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000488:	491a      	ldr	r1, [pc, #104]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800048a:	481b      	ldr	r0, [pc, #108]	; (80004f8 <LCD_8PINS_Config+0x108>)
 800048c:	f000 f9ab 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_5;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <LCD_8PINS_Config+0x104>)
 8000492:	2220      	movs	r2, #32
 8000494:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	b2da      	uxtb	r2, r3
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <LCD_8PINS_Config+0x104>)
 800049c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004a4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004a6:	4913      	ldr	r1, [pc, #76]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <LCD_8PINS_Config+0x108>)
 80004aa:	f000 f99c 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_6;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004b0:	2240      	movs	r2, #64	; 0x40
 80004b2:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004ba:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004c4:	490b      	ldr	r1, [pc, #44]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LCD_8PINS_Config+0x108>)
 80004c8:	f000 f98d 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_7;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = MODE;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004d8:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = SPEED;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004e0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004e2:	4904      	ldr	r1, [pc, #16]	; (80004f4 <LCD_8PINS_Config+0x104>)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <LCD_8PINS_Config+0x108>)
 80004e6:	f000 f97e 	bl	80007e6 <MCAL_GPIO_Init>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000048 	.word	0x20000048
 80004f8:	40010800 	.word	0x40010800

080004fc <LCD_INIT>:

void LCD_INIT(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0


	// The 3 CTRL bits are output
	delay(20);
 8000500:	2014      	movs	r0, #20
 8000502:	f7ff ff57 	bl	80003b4 <delay>
	// The CTRL is send xxxx000x which mean WriteOnLCD- WriteCommand- disable
	//	LCD_CTRL &=  (~(1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH));
	// ================= LCD_CTRL =================
	PinConfig.GPIO_PIN = EN_SWITCH;
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <LCD_INIT+0xb8>)
 8000508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800050e:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <LCD_INIT+0xb8>)
 8000510:	2204      	movs	r2, #4
 8000512:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <LCD_INIT+0xb8>)
 8000516:	2201      	movs	r2, #1
 8000518:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800051a:	4926      	ldr	r1, [pc, #152]	; (80005b4 <LCD_INIT+0xb8>)
 800051c:	4826      	ldr	r0, [pc, #152]	; (80005b8 <LCD_INIT+0xbc>)
 800051e:	f000 f962 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = RW_SWITCH;
 8000522:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <LCD_INIT+0xb8>)
 8000524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000528:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <LCD_INIT+0xb8>)
 800052c:	2204      	movs	r2, #4
 800052e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <LCD_INIT+0xb8>)
 8000532:	2201      	movs	r2, #1
 8000534:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000536:	491f      	ldr	r1, [pc, #124]	; (80005b4 <LCD_INIT+0xb8>)
 8000538:	481f      	ldr	r0, [pc, #124]	; (80005b8 <LCD_INIT+0xbc>)
 800053a:	f000 f954 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = RS_SWITCH;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <LCD_INIT+0xb8>)
 8000540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000544:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <LCD_INIT+0xb8>)
 8000548:	2204      	movs	r2, #4
 800054a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <LCD_INIT+0xb8>)
 800054e:	2201      	movs	r2, #1
 8000550:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000552:	4918      	ldr	r1, [pc, #96]	; (80005b4 <LCD_INIT+0xb8>)
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <LCD_INIT+0xbc>)
 8000556:	f000 f946 	bl	80007e6 <MCAL_GPIO_Init>

	// The 8 bits of port are output
	//	DataDir_LCD_PORT = 0xff;
	delay(15);
 800055a:	200f      	movs	r0, #15
 800055c:	f7ff ff2a 	bl	80003b4 <delay>


	LCD_8PINS_Config(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_10M);
 8000560:	2101      	movs	r1, #1
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff44 	bl	80003f0 <LCD_8PINS_Config>

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	4812      	ldr	r0, [pc, #72]	; (80005b8 <LCD_INIT+0xbc>)
 8000570:	f000 f9cc 	bl	800090c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <LCD_INIT+0xbc>)
 800057c:	f000 f9c6 	bl	800090c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LCD_INIT+0xbc>)
 8000588:	f000 f9c0 	bl	800090c <MCAL_GPIO_WritePin>

	delay(20);
 800058c:	2014      	movs	r0, #20
 800058e:	f7ff ff11 	bl	80003b4 <delay>

	LCD_CLear_Screen();
 8000592:	f000 f829 	bl	80005e8 <LCD_CLear_Screen>
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 8000596:	2038      	movs	r0, #56	; 0x38
 8000598:	f000 f852 	bl	8000640 <LCD_Write_Command>
	LCD_Write_Command(LCD_ENTRY_MODE);
 800059c:	2006      	movs	r0, #6
 800059e:	f000 f84f 	bl	8000640 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 80005a2:	2080      	movs	r0, #128	; 0x80
 80005a4:	f000 f84c 	bl	8000640 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 80005a8:	200f      	movs	r0, #15
 80005aa:	f000 f849 	bl	8000640 <LCD_Write_Command>
	//	LCD_Write_Command(LCD_ENTRY_MODE);
	//	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
	//	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
	//

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000048 	.word	0x20000048
 80005b8:	40010800 	.word	0x40010800

080005bc <LCD_Kick>:
	//	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);

}

void LCD_Kick(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	//	LCD_CTRL |=  (1<<EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <LCD_Kick+0x28>)
 80005c8:	f000 f9a0 	bl	800090c <MCAL_GPIO_WritePin>
	//	asm volatile ("nop");
	//	asm volatile ("nop");
	delay(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f7ff fef1 	bl	80003b4 <delay>

	//	LCD_CTRL &=  (~(1<<EN_SWITCH));
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <LCD_Kick+0x28>)
 80005da:	f000 f997 	bl	800090c <MCAL_GPIO_WritePin>

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800

080005e8 <LCD_CLear_Screen>:

void LCD_CLear_Screen(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN_CODE);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 f827 	bl	8000640 <LCD_Write_Command>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <LCD_GotoXY>:

void LCD_GotoXY(unsigned char line, unsigned char position)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	460a      	mov	r2, r1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	4613      	mov	r3, r2
 8000604:	71bb      	strb	r3, [r7, #6]
	if (line == 0)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <LCD_GotoXY+0x2a>
	{
		if (position >=0 && position < 16)
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	d812      	bhi.n	8000638 <LCD_GotoXY+0x42>
		{
			LCD_Write_Command(LCD_LINE0_BASE_ADDRESS + position);
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	3b80      	subs	r3, #128	; 0x80
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f811 	bl	8000640 <LCD_Write_Command>
		if (position >=0 && position < 16)
		{
			LCD_Write_Command(LCD_LINE1_BASE_ADDRESS + position);
		}
	}
}
 800061e:	e00b      	b.n	8000638 <LCD_GotoXY+0x42>
	else if (line == 1)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d108      	bne.n	8000638 <LCD_GotoXY+0x42>
		if (position >=0 && position < 16)
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d805      	bhi.n	8000638 <LCD_GotoXY+0x42>
			LCD_Write_Command(LCD_LINE1_BASE_ADDRESS + position);
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	3b40      	subs	r3, #64	; 0x40
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f804 	bl	8000640 <LCD_Write_Command>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <LCD_Write_Command>:

void LCD_Write_Command(unsigned char command)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = command;
	//	LCD_8PINS_Config(GPIO_MODE_OUTPUT_PP, GPIO_SPEED_10M);

	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <LCD_Write_Command+0x40>)
 8000652:	f000 f972 	bl	800093a <MCAL_GPIO_WritePort>

	// RW=0 for write LCD, RS=0 for command not data

	//	LCD_CTRL &=  (~((1<<RW_SWITCH) | (1<<RS_SWITCH)));
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <LCD_Write_Command+0x40>)
 800065e:	f000 f955 	bl	800090c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <LCD_Write_Command+0x40>)
 800066a:	f000 f94f 	bl	800090c <MCAL_GPIO_WritePin>
	delay(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fea0 	bl	80003b4 <delay>
	LCD_Kick();
 8000674:	f7ff ffa2 	bl	80005bc <LCD_Kick>
	//	// RW=0 for write LCD, RS=0 for command not data
	//	LCD_CTRL &=  (~((1<<RW_SWITCH) | (1<<RS_SWITCH)));
	//	LCD_Kick();
	//#endif

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010800 	.word	0x40010800

08000684 <LCD_Write_Char>:

void LCD_Write_Char(unsigned char character) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LCD_Write_Char+0x40>)
 8000696:	f000 f950 	bl	800093a <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <LCD_Write_Char+0x40>)
 80006a2:	f000 f933 	bl	800090c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <LCD_Write_Char+0x40>)
 80006ae:	f000 f92d 	bl	800090c <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff fe7e 	bl	80003b4 <delay>
	LCD_Kick();
 80006b8:	f7ff ff80 	bl	80005bc <LCD_Kick>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40010800 	.word	0x40010800

080006c8 <LCD_Write_String>:

void LCD_Write_String(char* str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	unsigned char count=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
	while (*str > 0)
 80006d4:	e01c      	b.n	8000710 <LCD_Write_String+0x48>
	{
		count++;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Char(*str++);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffcd 	bl	8000684 <LCD_Write_Char>
		// check if line is full
		if (count == 16)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b10      	cmp	r3, #16
 80006ee:	d104      	bne.n	80006fa <LCD_Write_String+0x32>
		{
			LCD_GotoXY(1,0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff7f 	bl	80005f6 <LCD_GotoXY>
 80006f8:	e00a      	b.n	8000710 <LCD_Write_String+0x48>
		}
		else if (count >= 32)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b1f      	cmp	r3, #31
 80006fe:	d907      	bls.n	8000710 <LCD_Write_String+0x48>
		{
			LCD_CLear_Screen();
 8000700:	f7ff ff72 	bl	80005e8 <LCD_CLear_Screen>
			LCD_GotoXY(0,0);
 8000704:	2100      	movs	r1, #0
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff75 	bl	80005f6 <LCD_GotoXY>
			count = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
	while (*str > 0)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1de      	bne.n	80006d6 <LCD_Write_String+0xe>
		}

	}
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Get_CRLH_Position>:
 *      Author: Andrew Adel
 */
#include "STM32_F103C6_GPIO_Driver.h"

uint16_t Get_CRLH_Position(uint16_t Pin)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
	switch (Pin) {
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b80      	cmp	r3, #128	; 0x80
 800072e:	d042      	beq.n	80007b6 <Get_CRLH_Position+0x96>
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	dc11      	bgt.n	8000758 <Get_CRLH_Position+0x38>
 8000734:	2b08      	cmp	r3, #8
 8000736:	d036      	beq.n	80007a6 <Get_CRLH_Position+0x86>
 8000738:	2b08      	cmp	r3, #8
 800073a:	dc06      	bgt.n	800074a <Get_CRLH_Position+0x2a>
 800073c:	2b02      	cmp	r3, #2
 800073e:	d02e      	beq.n	800079e <Get_CRLH_Position+0x7e>
 8000740:	2b04      	cmp	r3, #4
 8000742:	d02e      	beq.n	80007a2 <Get_CRLH_Position+0x82>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d028      	beq.n	800079a <Get_CRLH_Position+0x7a>
 8000748:	e047      	b.n	80007da <Get_CRLH_Position+0xba>
 800074a:	2b20      	cmp	r3, #32
 800074c:	d02f      	beq.n	80007ae <Get_CRLH_Position+0x8e>
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d02f      	beq.n	80007b2 <Get_CRLH_Position+0x92>
 8000752:	2b10      	cmp	r3, #16
 8000754:	d029      	beq.n	80007aa <Get_CRLH_Position+0x8a>
 8000756:	e040      	b.n	80007da <Get_CRLH_Position+0xba>
 8000758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075c:	d033      	beq.n	80007c6 <Get_CRLH_Position+0xa6>
 800075e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000762:	dc09      	bgt.n	8000778 <Get_CRLH_Position+0x58>
 8000764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000768:	d029      	beq.n	80007be <Get_CRLH_Position+0x9e>
 800076a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076e:	d028      	beq.n	80007c2 <Get_CRLH_Position+0xa2>
 8000770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000774:	d021      	beq.n	80007ba <Get_CRLH_Position+0x9a>
 8000776:	e030      	b.n	80007da <Get_CRLH_Position+0xba>
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d027      	beq.n	80007ce <Get_CRLH_Position+0xae>
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	dc03      	bgt.n	800078c <Get_CRLH_Position+0x6c>
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d01f      	beq.n	80007ca <Get_CRLH_Position+0xaa>
 800078a:	e026      	b.n	80007da <Get_CRLH_Position+0xba>
 800078c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000790:	d01f      	beq.n	80007d2 <Get_CRLH_Position+0xb2>
 8000792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000796:	d01e      	beq.n	80007d6 <Get_CRLH_Position+0xb6>
 8000798:	e01f      	b.n	80007da <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e01e      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	e01c      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	e01a      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	e018      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	e016      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80007ae:	2314      	movs	r3, #20
 80007b0:	e014      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	e012      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80007b6:	231c      	movs	r3, #28
 80007b8:	e010      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e00e      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	e00c      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	e00a      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80007c6:	230c      	movs	r3, #12
 80007c8:	e008      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80007ca:	2310      	movs	r3, #16
 80007cc:	e006      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80007ce:	2314      	movs	r3, #20
 80007d0:	e004      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80007d2:	2318      	movs	r3, #24
 80007d4:	e002      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80007d6:	231c      	movs	r3, #28
 80007d8:	e000      	b.n	80007dc <Get_CRLH_Position+0xbc>
		break;

	default:
		return 0;
 80007da:	2300      	movs	r3, #0
		break;
	}
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <MCAL_GPIO_Init>:
	@ retval			-None
	@ Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules but LQFP48 package only
							has GPIO A&B, Part of C&D export as External PINs from
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
 80007e6:	b590      	push	{r4, r7, lr}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
	// Port Configure Register low (GPIO_CRL) Configure PINS from 0 >> 7
	// Port Configure Register High (GPIO_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* configureRegister = NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]

	configureRegister = (PinConfig->GPIO_PIN < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d801      	bhi.n	8000804 <MCAL_GPIO_Init+0x1e>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	e001      	b.n	8000808 <MCAL_GPIO_Init+0x22>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3304      	adds	r3, #4
 8000808:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	(*configureRegister) &= ~(0xF<< Get_CRLH_Position(PinConfig->GPIO_PIN));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff86 	bl	8000720 <Get_CRLH_Position>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	230f      	movs	r3, #15
 800081a:	4093      	lsls	r3, r2
 800081c:	43da      	mvns	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	401a      	ands	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) ) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d00b      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d007      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	2b05      	cmp	r3, #5
 800083e:	d003      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d10e      	bne.n	8000866 <MCAL_GPIO_Init+0x80>
		PIN_Config = ( ((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_Output_Speed) ) & 0x0f;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	3b04      	subs	r3, #4
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	b25a      	sxtb	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	78db      	ldrb	r3, [r3, #3]
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e02c      	b.n	80008c0 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d003      	beq.n	8000876 <MCAL_GPIO_Init+0x90>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d107      	bne.n	8000886 <MCAL_GPIO_Init+0xa0>
		{
			//Clear CNFy[1:0] MODEy[1:0]
			PIN_Config = ( ((PinConfig->GPIO_MODE)<<2)) & 0x0f;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e01c      	b.n	80008c0 <MCAL_GPIO_Init+0xda>
		}
		else if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF) ) // Consider it as Input FLoating
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	2b08      	cmp	r3, #8
 800088c:	d102      	bne.n	8000894 <MCAL_GPIO_Init+0xae>
		{
			//Clear CNFy[1:0] MODEy[1:0]
			PIN_Config = ( (GPIO_MODE_INPUT_AF << 2) & 0x0f );
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e015      	b.n	80008c0 <MCAL_GPIO_Init+0xda>
		}
		else // Pull up / Pull down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0f );
 8000894:	2308      	movs	r3, #8
 8000896:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d107      	bne.n	80008b0 <MCAL_GPIO_Init+0xca>
			{
				//				Table 20. Port bit Configuration Table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PIN;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	431a      	orrs	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	e007      	b.n	80008c0 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//				Table 20. Port bit Configuration Table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	8812      	ldrh	r2, [r2, #0]
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configureRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PIN) );
 80008c0:	7bfc      	ldrb	r4, [r7, #15]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff2a 	bl	8000720 <Get_CRLH_Position>
 80008cc:	4603      	mov	r3, r0
 80008ce:	fa04 f203 	lsl.w	r2, r4, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	601a      	str	r2, [r3, #0]

}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <MCAL_GPIO_ReadPin>:
	@ param [in]		-PinNumber: Read Pin Number according to @ref GPIO_PINS_Define
	@ retval			-the input pin value (2 values based on @ref GPIO_PIN_STATE)
	@ Note				-None
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
	if ( ( (GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_PIN_SET;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return GPIO_PIN_RESET;
 8000900:	2300      	movs	r3, #0
	}
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <MCAL_GPIO_WritePin>:
	@ param [in]		-Value: Value to be write on pin
	@ retval			-None
	@ Note				-None
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t Value)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	807b      	strh	r3, [r7, #2]
 8000918:	4613      	mov	r3, r2
 800091a:	707b      	strb	r3, [r7, #1]
	if ( Value != GPIO_PIN_RESET )
 800091c:	787b      	ldrb	r3, [r7, #1]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <MCAL_GPIO_WritePin+0x1e>
	{
		//or: GPIOx->ODR |= PinNumber;
		GPIOx->BSRR = PinNumber;
 8000922:	887a      	ldrh	r2, [r7, #2]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	611a      	str	r2, [r3, #16]
	else
	{
		//or: GPIOx->ODR &= ~PinNumber;
		GPIOx->BRR = PinNumber;
	}
}
 8000928:	e002      	b.n	8000930 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber;
 800092a:	887a      	ldrh	r2, [r7, #2]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <MCAL_GPIO_WritePort>:
	@ param [in]		-Value: Value to be write on port
	@ retval			-None
	@ Note				-None
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint16_t Value)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000946:	887a      	ldrh	r2, [r7, #2]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	60da      	str	r2, [r3, #12]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <MCAL_GPIO_Write8Bits>:
void MCAL_GPIO_Write8Bits (GPIO_TypeDef* GPIOx,unsigned char start, uint16_t Value)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	4613      	mov	r3, r2
 8000964:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR &= ~(0xFF<<start);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	78fa      	ldrb	r2, [r7, #3]
 800096c:	21ff      	movs	r1, #255	; 0xff
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	43d2      	mvns	r2, r2
 8000974:	401a      	ands	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (Value << start);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	8839      	ldrh	r1, [r7, #0]
 8000980:	78fa      	ldrb	r2, [r7, #3]
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60da      	str	r2, [r3, #12]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
	...

08000998 <WriteOn_7Seg>:
 */

#include "SevenSegmentComAnode.h"

void WriteOn_7Seg(unsigned char value)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Write8Bits(SevenSegmetn_Port,StartBit, ((uint16_t)value) ); /* write data on to the LED port */
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2109      	movs	r1, #9
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <WriteOn_7Seg+0x20>)
 80009ac:	f7ff ffd3 	bl	8000956 <MCAL_GPIO_Write8Bits>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010c00 	.word	0x40010c00

080009bc <clock_init>:

typedef volatile unsigned int vuint32_t;


void clock_init()
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <clock_init+0x24>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <clock_init+0x24>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6193      	str	r3, [r2, #24]
	// Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <clock_init+0x24>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <clock_init+0x24>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <GPIOB_init>:
	MCAL_GPIO_Init(GPIOA, &PinConfig);

}

void GPIOB_init()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig;
	// ================= PB1 =================
	PinConfig.GPIO_PIN = GPIO_PIN_1;
 80009ea:	2302      	movs	r3, #2
 80009ec:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009ee:	2304      	movs	r3, #4
 80009f0:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009f2:	2301      	movs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <GPIOB_init+0xcc>)
 80009fc:	f7ff fef3 	bl	80007e6 <MCAL_GPIO_Init>
	//	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	//	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
	//	MCAL_GPIO_Init(GPIOB, &PinConfig);
	// =================================================================

	PinConfig.GPIO_PIN = GPIO_PIN_9;
 8000a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a04:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a06:	2304      	movs	r3, #4
 8000a08:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a14:	f7ff fee7 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_10;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a22:	2301      	movs	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a2c:	f7ff fedb 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_11;
 8000a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a34:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a36:	2304      	movs	r3, #4
 8000a38:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a44:	f7ff fecf 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_12;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a5c:	f7ff fec3 	bl	80007e6 <MCAL_GPIO_Init>

	PinConfig.GPIO_PIN = GPIO_PIN_13;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a66:	2304      	movs	r3, #4
 8000a68:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a74:	f7ff feb7 	bl	80007e6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PIN = GPIO_PIN_14;
 8000a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7c:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a82:	2301      	movs	r3, #1
 8000a84:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <GPIOB_init+0xcc>)
 8000a8c:	f7ff feab 	bl	80007e6 <MCAL_GPIO_Init>


	PinConfig.GPIO_PIN = GPIO_PIN_15;
 8000a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a94:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a96:	2304      	movs	r3, #4
 8000a98:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <GPIOB_init+0xcc>)
 8000aa4:	f7ff fe9f 	bl	80007e6 <MCAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <main>:
unsigned char SS_Values[] = {SS_ZERO, SS_ONE, SS_TWO, SS_THREE, SS_FOUR, SS_FIVE, SS_SIX, SS_SEVEN, SS_EIGHT, SS_NINE};

int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
	//			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	//		}
	//		delay(10);
	//	}

	clock_init();
 8000aba:	f7ff ff7f 	bl	80009bc <clock_init>

	LCD_INIT();
 8000abe:	f7ff fd1d 	bl	80004fc <LCD_INIT>
	delay(50);
 8000ac2:	2032      	movs	r0, #50	; 0x32
 8000ac4:	f7ff fc76 	bl	80003b4 <delay>
	Keypad_init();
 8000ac8:	f7ff fbf6 	bl	80002b8 <Keypad_init>


	GPIOB_init();
 8000acc:	f7ff ff8a 	bl	80009e4 <GPIOB_init>
	unsigned char number;
	uint32_t key;
	LCD_Write_String("Hey There");
 8000ad0:	4821      	ldr	r0, [pc, #132]	; (8000b58 <main+0xa4>)
 8000ad2:	f7ff fdf9 	bl	80006c8 <LCD_Write_String>
	delay(500);
 8000ad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ada:	f7ff fc6b 	bl	80003b4 <delay>
	LCD_CLear_Screen();
 8000ade:	f7ff fd83 	bl	80005e8 <LCD_CLear_Screen>
	int count = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
		WriteOn_7Seg(SS_Values[0]);
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <main+0xa8>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff54 	bl	8000998 <WriteOn_7Seg>
	while(1)
	{

		if (count == 16)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d104      	bne.n	8000b00 <main+0x4c>
		{
			LCD_GotoXY(1,0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fd7c 	bl	80005f6 <LCD_GotoXY>
 8000afe:	e00a      	b.n	8000b16 <main+0x62>
		}
		else if (count >= 32)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b1f      	cmp	r3, #31
 8000b04:	dd07      	ble.n	8000b16 <main+0x62>
		{
			LCD_CLear_Screen();
 8000b06:	f7ff fd6f 	bl	80005e8 <LCD_CLear_Screen>
			LCD_GotoXY(0,0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fd72 	bl	80005f6 <LCD_GotoXY>
			count = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
		}
		key = Keypad_getkey();
 8000b16:	f7ff fbdf 	bl	80002d8 <Keypad_getkey>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	60bb      	str	r3, [r7, #8]
		if (key != 'N') {
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b4e      	cmp	r3, #78	; 0x4e
 8000b22:	d0e5      	beq.n	8000af0 <main+0x3c>
			LCD_Write_Char(key);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fdab 	bl	8000684 <LCD_Write_Char>

			if ( (key >= '0')) {
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b2f      	cmp	r3, #47	; 0x2f
 8000b32:	d9dd      	bls.n	8000af0 <main+0x3c>
				if ((key <= '9')) {
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b39      	cmp	r3, #57	; 0x39
 8000b38:	d8da      	bhi.n	8000af0 <main+0x3c>
					number = key - '0';
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	3b30      	subs	r3, #48	; 0x30
 8000b40:	71fb      	strb	r3, [r7, #7]
					WriteOn_7Seg(SS_Values[number]);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <main+0xa8>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff25 	bl	8000998 <WriteOn_7Seg>
					count++;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
		if (count == 16)
 8000b54:	e7cc      	b.n	8000af0 <main+0x3c>
 8000b56:	bf00      	nop
 8000b58:	08000c14 	.word	0x08000c14
 8000b5c:	20000020 	.word	0x20000020

08000b60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8e:	f000 f811 	bl	8000bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff ff8f 	bl	8000ab4 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ba4:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000ba8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000bac:	2000004c 	.word	0x2000004c

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <__libc_init_array>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	4e0c      	ldr	r6, [pc, #48]	; (8000bec <__libc_init_array+0x38>)
 8000bba:	4c0d      	ldr	r4, [pc, #52]	; (8000bf0 <__libc_init_array+0x3c>)
 8000bbc:	1ba4      	subs	r4, r4, r6
 8000bbe:	10a4      	asrs	r4, r4, #2
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	d109      	bne.n	8000bd8 <__libc_init_array+0x24>
 8000bc4:	f000 f81a 	bl	8000bfc <_init>
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4e0a      	ldr	r6, [pc, #40]	; (8000bf4 <__libc_init_array+0x40>)
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <__libc_init_array+0x44>)
 8000bce:	1ba4      	subs	r4, r4, r6
 8000bd0:	10a4      	asrs	r4, r4, #2
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d105      	bne.n	8000be2 <__libc_init_array+0x2e>
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bdc:	4798      	blx	r3
 8000bde:	3501      	adds	r5, #1
 8000be0:	e7ee      	b.n	8000bc0 <__libc_init_array+0xc>
 8000be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be6:	4798      	blx	r3
 8000be8:	3501      	adds	r5, #1
 8000bea:	e7f2      	b.n	8000bd2 <__libc_init_array+0x1e>
 8000bec:	08000c20 	.word	0x08000c20
 8000bf0:	08000c20 	.word	0x08000c20
 8000bf4:	08000c20 	.word	0x08000c20
 8000bf8:	08000c24 	.word	0x08000c24

08000bfc <_init>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	bf00      	nop
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr

08000c08 <_fini>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	bf00      	nop
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr
