
Unit7_Lesson1_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000024e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000709  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  7a:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
 */ 

#include "MemFile.h"

void delay(int x)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <delay+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for (i = 0; i < x; i++)
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	19 82       	std	Y+1, r1	; 0x01
  92:	14 c0       	rjmp	.+40     	; 0xbc <delay+0x3a>
	{
		for(j = 0; j < 1000; j++);
  94:	1c 82       	std	Y+4, r1	; 0x04
  96:	1b 82       	std	Y+3, r1	; 0x03
  98:	06 c0       	rjmp	.+12     	; 0xa6 <delay+0x24>
  9a:	2b 81       	ldd	r18, Y+3	; 0x03
  9c:	3c 81       	ldd	r19, Y+4	; 0x04
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	3c 83       	std	Y+4, r19	; 0x04
  a4:	2b 83       	std	Y+3, r18	; 0x03
  a6:	2b 81       	ldd	r18, Y+3	; 0x03
  a8:	3c 81       	ldd	r19, Y+4	; 0x04
  aa:	28 3e       	cpi	r18, 0xE8	; 232
  ac:	33 40       	sbci	r19, 0x03	; 3
  ae:	ac f3       	brlt	.-22     	; 0x9a <delay+0x18>
#include "MemFile.h"

void delay(int x)
{
	volatile int i,j;
	for (i = 0; i < x; i++)
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	3a 83       	std	Y+2, r19	; 0x02
  ba:	29 83       	std	Y+1, r18	; 0x01
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	28 17       	cp	r18, r24
  c2:	39 07       	cpc	r19, r25
  c4:	3c f3       	brlt	.-50     	; 0x94 <delay+0x12>
	{
		for(j = 0; j < 1000; j++);
	}
		
}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <IOD_init>:

// ===================== PORT_D_Init =====================
void IOD_init()
{
	// ===================== output Configuration =====================
	PD_DR->pins.pin4 = 1;
  d4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
  d8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
	PD_DDRD->pins.pin4 = 1;
  e2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
  e6:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
  ea:	80 81       	ld	r24, Z
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	80 83       	st	Z, r24
	
	PD_DR->pins.pin5 = 1;
  f0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
  f4:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	80 83       	st	Z, r24
	PD_DDRD->pins.pin5 = 1;
  fe:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 102:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 106:	80 81       	ld	r24, Z
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	80 83       	st	Z, r24
	
	PD_DR->pins.pin6 = 1;
 10c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 110:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
	PD_DDRD->pins.pin6 = 1;
 11a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 11e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
	
	PD_DR->pins.pin7 = 1;
 128:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 12c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 130:	80 81       	ld	r24, Z
 132:	80 68       	ori	r24, 0x80	; 128
 134:	80 83       	st	Z, r24
	PD_DDRD->pins.pin7 = 1;
 136:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 13a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	80 83       	st	Z, r24
	
	// ===================== input Configuration =====================
	PD_DR->pins.pin0 = 1; // high impedance
 144:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 148:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	PD_DDRD->pins.pin0 = 0; 
 152:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 156:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <main>:
	
}

int main(void)
{
    IOD_init();
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <IOD_init>
	
	PD_DR->pins.pin4 = 0;
 166:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 16a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 16e:	80 81       	ld	r24, Z
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	80 83       	st	Z, r24
	PD_DR->pins.pin5 = 0;
 174:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 178:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 17c:	80 81       	ld	r24, Z
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	80 83       	st	Z, r24
	PD_DR->pins.pin6 = 0;
 182:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 186:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 18a:	80 81       	ld	r24, Z
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	80 83       	st	Z, r24
	PD_DR->pins.pin7 = 0;
 190:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 194:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 198:	80 81       	ld	r24, Z
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	80 83       	st	Z, r24
	
	char count = 5, prev = 1;
 19e:	c1 e0       	ldi	r28, 0x01	; 1
 1a0:	d5 e0       	ldi	r29, 0x05	; 5
    while (1) 
    {
		if ( (PD_PIN->pins.pin0 == 1) )
 1a2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	80 81       	ld	r24, Z
 1ac:	80 ff       	sbrs	r24, 0
 1ae:	47 c0       	rjmp	.+142    	; 0x23e <main+0xdc>
		{
			if(prev == 0)
 1b0:	c1 11       	cpse	r28, r1
 1b2:	46 c0       	rjmp	.+140    	; 0x240 <main+0xde>
			{
				PD_DR->pins.pin4 = 0;
 1b4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 1b8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 1bc:	80 81       	ld	r24, Z
 1be:	8f 7e       	andi	r24, 0xEF	; 239
 1c0:	80 83       	st	Z, r24
				PD_DR->pins.pin5 = 0;
 1c2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 1c6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	80 83       	st	Z, r24
				PD_DR->pins.pin6 = 0;
 1d0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 1d4:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 1d8:	80 81       	ld	r24, Z
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	80 83       	st	Z, r24
				PD_DR->pins.pin7 = 0;
 1de:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 1e2:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 77       	andi	r24, 0x7F	; 127
 1ea:	80 83       	st	Z, r24
				if (count <= 7)
 1ec:	d8 30       	cpi	r29, 0x08	; 8
 1ee:	90 f4       	brcc	.+36     	; 0x214 <main+0xb2>
				{
					PD_PIN->port |= (1<< count);
 1f0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	20 81       	ld	r18, Z
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0d 2e       	mov	r0, r29
 200:	02 c0       	rjmp	.+4      	; 0x206 <main+0xa4>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <main+0xa0>
 20a:	82 2b       	or	r24, r18
 20c:	80 83       	st	Z, r24
					count++;
 20e:	df 5f       	subi	r29, 0xFF	; 255
					count = 5;
					PD_DR->pins.pin4 = 1;
					delay(500);
					PD_DR->pins.pin4 = 0;
				}
				prev = 1;
 210:	c1 e0       	ldi	r28, 0x01	; 1
 212:	16 c0       	rjmp	.+44     	; 0x240 <main+0xde>
					count++;
				}
				else
				{
					count = 5;
					PD_DR->pins.pin4 = 1;
 214:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 218:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 21c:	80 81       	ld	r24, Z
 21e:	80 61       	ori	r24, 0x10	; 16
 220:	80 83       	st	Z, r24
					delay(500);
 222:	84 ef       	ldi	r24, 0xF4	; 244
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 41 00 	call	0x82	; 0x82 <delay>
					PD_DR->pins.pin4 = 0;
 22a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 22e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 232:	80 81       	ld	r24, Z
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	80 83       	st	Z, r24
				}
				prev = 1;
 238:	c1 e0       	ldi	r28, 0x01	; 1
					PD_PIN->port |= (1<< count);
					count++;
				}
				else
				{
					count = 5;
 23a:	d5 e0       	ldi	r29, 0x05	; 5
 23c:	01 c0       	rjmp	.+2      	; 0x240 <main+0xde>
				prev = 1;
			}
		}
		else
		{
			prev = 0;
 23e:	c0 e0       	ldi	r28, 0x00	; 0
		}
		delay(10);
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 41 00 	call	0x82	; 0x82 <delay>
		
    }
 248:	ac cf       	rjmp	.-168    	; 0x1a2 <main+0x40>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
