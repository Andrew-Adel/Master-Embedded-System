
Section1_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000332  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000902  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 14 01 	call	0x228	; 0x228 <main>
  7a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
#define ToggleBit(port,bin) (port ^= (1<<bin))

static unsigned int sevenSigmentNumber[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void delay(int x)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <delay+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for (i = 0; i < x; i++)
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	19 82       	std	Y+1, r1	; 0x01
  92:	14 c0       	rjmp	.+40     	; 0xbc <delay+0x3a>
	{
		for(j = 0; j < 1000; j++);
  94:	1c 82       	std	Y+4, r1	; 0x04
  96:	1b 82       	std	Y+3, r1	; 0x03
  98:	06 c0       	rjmp	.+12     	; 0xa6 <delay+0x24>
  9a:	2b 81       	ldd	r18, Y+3	; 0x03
  9c:	3c 81       	ldd	r19, Y+4	; 0x04
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	3c 83       	std	Y+4, r19	; 0x04
  a4:	2b 83       	std	Y+3, r18	; 0x03
  a6:	2b 81       	ldd	r18, Y+3	; 0x03
  a8:	3c 81       	ldd	r19, Y+4	; 0x04
  aa:	28 3e       	cpi	r18, 0xE8	; 232
  ac:	33 40       	sbci	r19, 0x03	; 3
  ae:	ac f3       	brlt	.-22     	; 0x9a <delay+0x18>
static unsigned int sevenSigmentNumber[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void delay(int x)
{
	volatile int i,j;
	for (i = 0; i < x; i++)
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	3a 83       	std	Y+2, r19	; 0x02
  ba:	29 83       	std	Y+1, r18	; 0x01
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	28 17       	cp	r18, r24
  c2:	39 07       	cpc	r19, r25
  c4:	3c f3       	brlt	.-50     	; 0x94 <delay+0x12>
	{
		for(j = 0; j < 1000; j++);
	}
	
}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <PORTA_init>:

void PORTA_init()
{
	PA_DDRD->port = 0xff;
  d4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <PA_DDRD>
  d8:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <PA_DDRD+0x1>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	80 83       	st	Z, r24
	PA_DR->port = 0x00;
  e0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PA_DR>
  e4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PA_DR+0x1>
  e8:	10 82       	st	Z, r1
  ea:	08 95       	ret

000000ec <PORTB_init>:
}

void PORTB_init()
{
	PB_DDRD->port = 0xff;
  ec:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <PB_DDRD>
  f0:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <PB_DDRD+0x1>
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	80 83       	st	Z, r24
	PB_DR->port = 0x00;
  f8:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PB_DR>
  fc:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PB_DR+0x1>
 100:	10 82       	st	Z, r1
 102:	08 95       	ret

00000104 <PORTC_init>:
}

void PORTC_init()
{
	PC_DDRD->port = 0xff;
 104:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <PC_DDRD>
 108:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <PC_DDRD+0x1>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	80 83       	st	Z, r24
	PC_DR->port = 0xff;
 110:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PC_DR>
 114:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PC_DR+0x1>
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <PORTD_init>:
}

void PORTD_init()
{
	PD_DDRD->pins.pin0 = 0;
 11c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 120:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 83       	st	Z, r24
	PD_DR->pins.pin0 = 0;
 12a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 12e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 132:	80 81       	ld	r24, Z
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	80 83       	st	Z, r24
	
	PD_DDRD->pins.pin1 = 0;
 138:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 13c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 140:	80 81       	ld	r24, Z
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	80 83       	st	Z, r24
	PD_DR->pins.pin1 = 0;
 146:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 14a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 14e:	80 81       	ld	r24, Z
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	80 83       	st	Z, r24
	
	PD_DDRD->pins.pin2 = 0;
 154:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 158:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 15c:	80 81       	ld	r24, Z
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	80 83       	st	Z, r24
	PD_DR->pins.pin2 = 0;
 162:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 166:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 16a:	80 81       	ld	r24, Z
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	80 83       	st	Z, r24
	
	PD_DDRD->pins.pin3 = 0;
 170:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PD_DDRD>
 174:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PD_DDRD+0x1>
 178:	80 81       	ld	r24, Z
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	80 83       	st	Z, r24
	PD_DR->pins.pin3 = 0;
 17e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PD_DR>
 182:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PD_DR+0x1>
 186:	80 81       	ld	r24, Z
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <Task1>:

}

void Task1()
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
	int count = 0;
	for (count = 0; count<8; count++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	14 c0       	rjmp	.+40     	; 0x1c0 <Task1+0x32>
	{
		PA_DR->port ^= 1<<count;
 198:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PA_DR>
 19c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PA_DR+0x1>
 1a0:	20 81       	ld	r18, Z
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0c 2e       	mov	r0, r28
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Task1+0x20>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Task1+0x1c>
 1b2:	82 27       	eor	r24, r18
 1b4:	80 83       	st	Z, r24
		delay(10);
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <delay>
}

void Task1()
{
	int count = 0;
	for (count = 0; count<8; count++)
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	c8 30       	cpi	r28, 0x08	; 8
 1c2:	d1 05       	cpc	r29, r1
 1c4:	4c f3       	brlt	.-46     	; 0x198 <Task1+0xa>
	{
		PA_DR->port ^= 1<<count;
		delay(10);
	}
	count--;
 1c6:	21 97       	sbiw	r28, 0x01	; 1
	for (; count >= 0; count--)
 1c8:	14 c0       	rjmp	.+40     	; 0x1f2 <Task1+0x64>
	{
		PA_DR->port ^= 1<<count;
 1ca:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PA_DR>
 1ce:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PA_DR+0x1>
 1d2:	20 81       	ld	r18, Z
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0c 2e       	mov	r0, r28
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Task1+0x52>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Task1+0x4e>
 1e4:	82 27       	eor	r24, r18
 1e6:	80 83       	st	Z, r24
		delay(10);
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 41 00 	call	0x82	; 0x82 <delay>
	{
		PA_DR->port ^= 1<<count;
		delay(10);
	}
	count--;
	for (; count >= 0; count--)
 1f0:	21 97       	sbiw	r28, 0x01	; 1
 1f2:	dd 23       	and	r29, r29
 1f4:	54 f7       	brge	.-44     	; 0x1ca <Task1+0x3c>
	{
		PA_DR->port ^= 1<<count;
		delay(10);
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <Task3>:

void Task3(int n){
	if (n >= 0 && n < 10)
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	91 05       	cpc	r25, r1
 200:	60 f4       	brcc	.+24     	; 0x21a <Task3+0x1e>
	{
		PC_DR->port = sevenSigmentNumber[n];		
 202:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <PC_DR>
 206:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <PC_DR+0x1>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	fc 01       	movw	r30, r24
 210:	ee 58       	subi	r30, 0x8E	; 142
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 81       	ld	r24, Z
 216:	8c 93       	st	X, r24
 218:	08 95       	ret
	}else
		PC_DR->port = sevenSigmentNumber[8];
 21a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PC_DR>
 21e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PC_DR+0x1>
 222:	8f e7       	ldi	r24, 0x7F	; 127
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <main>:
}

int main(void)
{
	PORTA_init();
 228:	0e 94 6a 00 	call	0xd4	; 0xd4 <PORTA_init>
	PORTB_init();
 22c:	0e 94 76 00 	call	0xec	; 0xec <PORTB_init>
	PORTC_init();
 230:	0e 94 82 00 	call	0x104	; 0x104 <PORTC_init>
	PORTD_init();
 234:	0e 94 8e 00 	call	0x11c	; 0x11c <PORTD_init>
	
	signed char count = 0;
	char dir = 1;
	unsigned char D1flag = 0, D2flag = 0,D3flag=0;
	unsigned sevSegCount = 0;
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
	PORTC_init();
	PORTD_init();
	
	signed char count = 0;
	char dir = 1;
	unsigned char D1flag = 0, D2flag = 0,D3flag=0;
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	f1 2c       	mov	r15, r1
 240:	00 e0       	ldi	r16, 0x00	; 0
	PORTB_init();
	PORTC_init();
	PORTD_init();
	
	signed char count = 0;
	char dir = 1;
 242:	dd 24       	eor	r13, r13
 244:	d3 94       	inc	r13
	PORTA_init();
	PORTB_init();
	PORTC_init();
	PORTD_init();
	
	signed char count = 0;
 246:	e1 2c       	mov	r14, r1
 248:	01 c0       	rjmp	.+2      	; 0x24c <main+0x24>
				PB_DR->pins.pin0 = 0;
				D3flag = 1;
			}
		}else
		{
			D3flag = 0;
 24a:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char D1flag = 0, D2flag = 0,D3flag=0;
	unsigned sevSegCount = 0;
    /* Replace with your application code */
    while (1) 
    {
		if (PD_PIN->pins.pin0 == 1)
 24c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 250:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 254:	80 81       	ld	r24, Z
 256:	80 fd       	sbrc	r24, 0
		{
			Task1();
 258:	0e 94 c7 00 	call	0x18e	; 0x18e <Task1>
		}
		// =================== Task 2 ===================  
		if (PD_PIN->pins.pin1 == 1)
 25c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 260:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 264:	80 81       	ld	r24, Z
 266:	81 ff       	sbrs	r24, 1
 268:	19 c0       	rjmp	.+50     	; 0x29c <main+0x74>
		{
			if (D1flag  == 0)
 26a:	01 11       	cpse	r16, r1
 26c:	25 c0       	rjmp	.+74     	; 0x2b8 <main+0x90>
			{
				ToggleBit(PA_DR->port,count);
 26e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PA_DR>
 272:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PA_DR+0x1>
 276:	20 81       	ld	r18, Z
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 2c       	mov	r0, r14
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x5c>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <main+0x58>
 288:	82 27       	eor	r24, r18
 28a:	80 83       	st	Z, r24
				count+= dir;
 28c:	ed 0c       	add	r14, r13
				if (count > 7)
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	8e 15       	cp	r24, r14
 292:	34 f0       	brlt	.+12     	; 0x2a0 <main+0x78>
				{
					count = 7;
					dir = -1;
				}
				else if (count < 0)
 294:	ee 20       	and	r14, r14
 296:	64 f0       	brlt	.+24     	; 0x2b0 <main+0x88>
				{
					count = 0;
					dir = 1;
				}
				D1flag  = 1;
 298:	01 e0       	ldi	r16, 0x01	; 1
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <main+0x90>
			}
		}else
		{
			D1flag  = 0;
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <main+0x90>
				else if (count < 0)
				{
					count = 0;
					dir = 1;
				}
				D1flag  = 1;
 2a0:	01 e0       	ldi	r16, 0x01	; 1
				ToggleBit(PA_DR->port,count);
				count+= dir;
				if (count > 7)
				{
					count = 7;
					dir = -1;
 2a2:	dd 24       	eor	r13, r13
 2a4:	da 94       	dec	r13
			{
				ToggleBit(PA_DR->port,count);
				count+= dir;
				if (count > 7)
				{
					count = 7;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f7 e0       	ldi	r31, 0x07	; 7
 2aa:	ef 2e       	mov	r14, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <main+0x90>
				else if (count < 0)
				{
					count = 0;
					dir = 1;
				}
				D1flag  = 1;
 2b0:	01 e0       	ldi	r16, 0x01	; 1
					dir = -1;
				}
				else if (count < 0)
				{
					count = 0;
					dir = 1;
 2b2:	dd 24       	eor	r13, r13
 2b4:	d3 94       	inc	r13
					count = 7;
					dir = -1;
				}
				else if (count < 0)
				{
					count = 0;
 2b6:	e1 2c       	mov	r14, r1
		}else
		{
			D1flag  = 0;
		}
		
		if (PD_PIN->pins.pin2 == 1)
 2b8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2bc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c0:	80 81       	ld	r24, Z
 2c2:	82 ff       	sbrs	r24, 2
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <main+0xc0>
		{
			if (D2flag  == 0)
 2c6:	f1 10       	cpse	r15, r1
 2c8:	15 c0       	rjmp	.+42     	; 0x2f4 <main+0xcc>
			{
				Task3(sevSegCount++);
 2ca:	5e 01       	movw	r10, r28
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	a8 1a       	sub	r10, r24
 2d0:	b8 0a       	sbc	r11, r24
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Task3>
				if (sevSegCount == 10)
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	a8 16       	cp	r10, r24
 2dc:	b1 04       	cpc	r11, r1
 2de:	31 f0       	breq	.+12     	; 0x2ec <main+0xc4>
		
		if (PD_PIN->pins.pin2 == 1)
		{
			if (D2flag  == 0)
			{
				Task3(sevSegCount++);
 2e0:	e5 01       	movw	r28, r10
				if (sevSegCount == 10)
				{
					sevSegCount = 0;
				}
				D2flag = 1;
 2e2:	ff 24       	eor	r15, r15
 2e4:	f3 94       	inc	r15
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <main+0xcc>
			}
		}else
		{
			D2flag = 0;
 2e8:	f1 2c       	mov	r15, r1
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <main+0xcc>
			if (D2flag  == 0)
			{
				Task3(sevSegCount++);
				if (sevSegCount == 10)
				{
					sevSegCount = 0;
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
				}
				D2flag = 1;
 2f0:	ff 24       	eor	r15, r15
 2f2:	f3 94       	inc	r15
		}else
		{
			D2flag = 0;
		}
		
		if (PD_PIN->pins.pin3 == 1)
 2f4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	80 81       	ld	r24, Z
 2fe:	83 ff       	sbrs	r24, 3
 300:	a4 cf       	rjmp	.-184    	; 0x24a <main+0x22>
		{
			if (D3flag  == 0)
 302:	11 11       	cpse	r17, r1
 304:	a3 cf       	rjmp	.-186    	; 0x24c <main+0x24>
			{
				PB_DR->pins.pin0 = 1;
 306:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PB_DR>
 30a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PB_DR+0x1>
 30e:	80 81       	ld	r24, Z
 310:	81 60       	ori	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
				delay(50);
 314:	82 e3       	ldi	r24, 0x32	; 50
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 41 00 	call	0x82	; 0x82 <delay>
				PB_DR->pins.pin0 = 0;
 31c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PB_DR>
 320:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PB_DR+0x1>
 324:	80 81       	ld	r24, Z
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	80 83       	st	Z, r24
				D3flag = 1;
 32a:	11 e0       	ldi	r17, 0x01	; 1
 32c:	8f cf       	rjmp	.-226    	; 0x24c <main+0x24>

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
