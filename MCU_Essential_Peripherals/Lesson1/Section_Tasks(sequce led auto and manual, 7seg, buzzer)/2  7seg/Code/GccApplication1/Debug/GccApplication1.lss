
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d5  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023b  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 76 00 	call	0xec	; 0xec <main>
  7a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <PORTC_init>:
#include "MemFile.h"
#define F_CPU 0
#include <util/delay.h>
void PORTC_init()
{
	PC_DDRD->port = 0xff;
  82:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  86:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 83       	st	Z, r24
	PC_DR->port = 0xff;
  8e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PC_DR>
  92:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PC_DR+0x1>
  96:	80 83       	st	Z, r24
  98:	08 95       	ret

0000009a <delay>:
}

#define clearBit(Port,bit) (Port &= ~(1<<bit))
void delay(int x)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	00 d0       	rcall	.+0      	; 0xa0 <delay+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <delay+0x8>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for (i=0;i<x;i++)
  a6:	1a 82       	std	Y+2, r1	; 0x02
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	14 c0       	rjmp	.+40     	; 0xd4 <delay+0x3a>
	{
		for (j=0;j<1000;j++);
  ac:	1c 82       	std	Y+4, r1	; 0x04
  ae:	1b 82       	std	Y+3, r1	; 0x03
  b0:	06 c0       	rjmp	.+12     	; 0xbe <delay+0x24>
  b2:	2b 81       	ldd	r18, Y+3	; 0x03
  b4:	3c 81       	ldd	r19, Y+4	; 0x04
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	3c 83       	std	Y+4, r19	; 0x04
  bc:	2b 83       	std	Y+3, r18	; 0x03
  be:	2b 81       	ldd	r18, Y+3	; 0x03
  c0:	3c 81       	ldd	r19, Y+4	; 0x04
  c2:	28 3e       	cpi	r18, 0xE8	; 232
  c4:	33 40       	sbci	r19, 0x03	; 3
  c6:	ac f3       	brlt	.-22     	; 0xb2 <delay+0x18>

#define clearBit(Port,bit) (Port &= ~(1<<bit))
void delay(int x)
{
	volatile int i,j;
	for (i=0;i<x;i++)
  c8:	29 81       	ldd	r18, Y+1	; 0x01
  ca:	3a 81       	ldd	r19, Y+2	; 0x02
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	3a 83       	std	Y+2, r19	; 0x02
  d2:	29 83       	std	Y+1, r18	; 0x01
  d4:	29 81       	ldd	r18, Y+1	; 0x01
  d6:	3a 81       	ldd	r19, Y+2	; 0x02
  d8:	28 17       	cp	r18, r24
  da:	39 07       	cpc	r19, r25
  dc:	3c f3       	brlt	.-50     	; 0xac <delay+0x12>
	{
		for (j=0;j<1000;j++);
	}
	
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:
int main(void)
{
	PORTC_init();
  ec:	0e 94 41 00 	call	0x82	; 0x82 <PORTC_init>
	unsigned char i,j,k;
    /* Replace with your application code */
    while (1) 
    {
		for (i=0; i<10; i++)
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	27 c0       	rjmp	.+78     	; 0x142 <main+0x56>
				PC_DR->port |= (j<<4);
				_delay_ms(100);
				*/
				for (k=0;k<10;k++)
				{
					PC_DR->port = 0b1011 | (i<<4);
  f4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PC_DR>
  f8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PC_DR+0x1>
  fc:	20 e1       	ldi	r18, 0x10	; 16
  fe:	12 9f       	mul	r17, r18
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	8b 60       	ori	r24, 0x0B	; 11
 106:	80 83       	st	Z, r24
					delay(20);
 108:	84 e1       	ldi	r24, 0x14	; 20
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 4d 00 	call	0x9a	; 0x9a <delay>
					PC_DR->port = 0b0111 | (j<<4);
 110:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PC_DR>
 114:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PC_DR+0x1>
 118:	20 e1       	ldi	r18, 0x10	; 16
 11a:	d2 9f       	mul	r29, r18
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	87 60       	ori	r24, 0x07	; 7
 122:	80 83       	st	Z, r24
					delay(20);
 124:	84 e1       	ldi	r24, 0x14	; 20
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 4d 00 	call	0x9a	; 0x9a <delay>
				PC_DR->pins.pin2 = 1;
				PC_DR->pins.pin3 = 0;
				PC_DR->port |= (j<<4);
				_delay_ms(100);
				*/
				for (k=0;k<10;k++)
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0x46>
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	ca 30       	cpi	r28, 0x0A	; 10
 134:	f8 f2       	brcs	.-66     	; 0xf4 <main+0x8>
    /* Replace with your application code */
    while (1) 
    {
		for (i=0; i<10; i++)
		{
			for (j=0; j<10; j++)
 136:	df 5f       	subi	r29, 0xFF	; 255
 138:	01 c0       	rjmp	.+2      	; 0x13c <main+0x50>
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	da 30       	cpi	r29, 0x0A	; 10
 13e:	c0 f3       	brcs	.-16     	; 0x130 <main+0x44>
	PORTC_init();
	unsigned char i,j,k;
    /* Replace with your application code */
    while (1) 
    {
		for (i=0; i<10; i++)
 140:	1f 5f       	subi	r17, 0xFF	; 255
 142:	1a 30       	cpi	r17, 0x0A	; 10
 144:	d0 f3       	brcs	.-12     	; 0x13a <main+0x4e>
 146:	d4 cf       	rjmp	.-88     	; 0xf0 <main+0x4>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
