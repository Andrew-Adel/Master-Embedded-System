
LCD_AND_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001084  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00001084  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f9c  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087f  00000000  00000000  00002a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000032bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009a9  00000000  00000000  00003945  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000042ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 1a 02 	call	0x434	; 0x434 <main>
      7a:	0c 94 40 08 	jmp	0x1080	; 0x1080 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:
unsigned char Key_padCol[] = {C0, C1, C2, C3};
unsigned char Key_padRow[] = {R0, R1, R2, R3}; 

void Keypad_init()
{
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));	
      82:	81 b3       	in	r24, 0x11	; 17
      84:	80 6f       	ori	r24, 0xF0	; 240
      86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
      88:	81 b3       	in	r24, 0x11	; 17
      8a:	80 7f       	andi	r24, 0xF0	; 240
      8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
      8e:	8f ef       	ldi	r24, 0xFF	; 255
      90:	82 bb       	out	0x12, r24	; 18
      92:	08 95       	ret

00000094 <Keypad_getkey>:
}
char Keypad_getkey()
{
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	cf 93       	push	r28
      9a:	df 93       	push	r29
	int i,j;
	for (i=0;i<4;i++)
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	50 e0       	ldi	r21, 0x00	; 0
      a0:	56 c0       	rjmp	.+172    	; 0x14e <Keypad_getkey+0xba>
	{
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
      a2:	32 b3       	in	r19, 0x12	; 18
      a4:	e4 e6       	ldi	r30, 0x64	; 100
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	8c 01       	movw	r16, r24
      ae:	00 80       	ld	r0, Z
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <Keypad_getkey+0x22>
      b2:	00 0f       	add	r16, r16
      b4:	11 1f       	adc	r17, r17
      b6:	0a 94       	dec	r0
      b8:	e2 f7       	brpl	.-8      	; 0xb2 <Keypad_getkey+0x1e>
      ba:	ec 01       	movw	r28, r24
      bc:	01 80       	ldd	r0, Z+1	; 0x01
      be:	02 c0       	rjmp	.+4      	; 0xc4 <Keypad_getkey+0x30>
      c0:	cc 0f       	add	r28, r28
      c2:	dd 1f       	adc	r29, r29
      c4:	0a 94       	dec	r0
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <Keypad_getkey+0x2c>
      c8:	dc 01       	movw	r26, r24
      ca:	02 80       	ldd	r0, Z+2	; 0x02
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_getkey+0x3e>
      ce:	aa 0f       	add	r26, r26
      d0:	bb 1f       	adc	r27, r27
      d2:	0a 94       	dec	r0
      d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_getkey+0x3a>
      d6:	bc 01       	movw	r22, r24
      d8:	03 80       	ldd	r0, Z+3	; 0x03
      da:	02 c0       	rjmp	.+4      	; 0xe0 <Keypad_getkey+0x4c>
      dc:	66 0f       	add	r22, r22
      de:	77 1f       	adc	r23, r23
      e0:	0a 94       	dec	r0
      e2:	e2 f7       	brpl	.-8      	; 0xdc <Keypad_getkey+0x48>
      e4:	2c 2f       	mov	r18, r28
      e6:	20 2b       	or	r18, r16
      e8:	2a 2b       	or	r18, r26
      ea:	26 2b       	or	r18, r22
      ec:	23 2b       	or	r18, r19
      ee:	22 bb       	out	0x12, r18	; 18
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
      f0:	22 b3       	in	r18, 0x12	; 18
      f2:	fa 01       	movw	r30, r20
      f4:	ec 59       	subi	r30, 0x9C	; 156
      f6:	ff 4f       	sbci	r31, 0xFF	; 255
      f8:	00 80       	ld	r0, Z
      fa:	02 c0       	rjmp	.+4      	; 0x100 <Keypad_getkey+0x6c>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	0a 94       	dec	r0
     102:	e2 f7       	brpl	.-8      	; 0xfc <Keypad_getkey+0x68>
     104:	80 95       	com	r24
     106:	82 23       	and	r24, r18
     108:	82 bb       	out	0x12, r24	; 18
		
		for (j=0;j<4;j++)
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	1a c0       	rjmp	.+52     	; 0x144 <Keypad_getkey+0xb0>
		{
			if ( !(keypadPIN & (1<<Key_padRow[j])) )
     110:	80 b3       	in	r24, 0x10	; 16
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	e0 5a       	subi	r30, 0xA0	; 160
     118:	ff 4f       	sbci	r31, 0xFF	; 255
     11a:	00 80       	ld	r0, Z
     11c:	02 c0       	rjmp	.+4      	; 0x122 <Keypad_getkey+0x8e>
     11e:	95 95       	asr	r25
     120:	87 95       	ror	r24
     122:	0a 94       	dec	r0
     124:	e2 f7       	brpl	.-8      	; 0x11e <Keypad_getkey+0x8a>
     126:	80 fd       	sbrc	r24, 0
     128:	0b c0       	rjmp	.+22     	; 0x140 <Keypad_getkey+0xac>
			{
				return KeysValues[j][i];
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	28 59       	subi	r18, 0x98	; 152
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	f9 01       	movw	r30, r18
     138:	e4 0f       	add	r30, r20
     13a:	f5 1f       	adc	r31, r21
     13c:	80 81       	ld	r24, Z
     13e:	0c c0       	rjmp	.+24     	; 0x158 <Keypad_getkey+0xc4>
	for (i=0;i<4;i++)
	{
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		
		for (j=0;j<4;j++)
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	24 30       	cpi	r18, 0x04	; 4
     146:	31 05       	cpc	r19, r1
     148:	1c f3       	brlt	.-58     	; 0x110 <Keypad_getkey+0x7c>
	KEYPAD_PORT = 0xFF;
}
char Keypad_getkey()
{
	int i,j;
	for (i=0;i<4;i++)
     14a:	4f 5f       	subi	r20, 0xFF	; 255
     14c:	5f 4f       	sbci	r21, 0xFF	; 255
     14e:	44 30       	cpi	r20, 0x04	; 4
     150:	51 05       	cpc	r21, r1
     152:	0c f4       	brge	.+2      	; 0x156 <Keypad_getkey+0xc2>
     154:	a6 cf       	rjmp	.-180    	; 0xa2 <Keypad_getkey+0xe>
			{
				return KeysValues[j][i];
			}
		}
	}
	return 'N';
     156:	8e e4       	ldi	r24, 0x4E	; 78
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	08 95       	ret

00000162 <LCD_Kick>:

}

void LCD_Kick(void)
{
	LCD_CTRL |=  (1<<EN_SWITCH);
     162:	88 b3       	in	r24, 0x18	; 24
     164:	88 60       	ori	r24, 0x08	; 8
     166:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     168:	87 e8       	ldi	r24, 0x87	; 135
     16a:	93 e1       	ldi	r25, 0x13	; 19
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Kick+0xa>
     170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Kick+0x10>
     172:	00 00       	nop
//	asm volatile ("nop");
//	asm volatile ("nop");
	_delay_ms(20);
	LCD_CTRL &=  (~(1<<EN_SWITCH));
     174:	88 b3       	in	r24, 0x18	; 24
     176:	87 7f       	andi	r24, 0xF7	; 247
     178:	88 bb       	out	0x18, r24	; 24
     17a:	08 95       	ret

0000017c <LCD_IsBusy>:

}

void LCD_IsBusy()
{
	DataDir_LCD_PORT &= (~(0xFF<<DATA_SHIFT));
     17c:	8a b3       	in	r24, 0x1a	; 26
     17e:	8f 70       	andi	r24, 0x0F	; 15
     180:	8a bb       	out	0x1a, r24	; 26
	// EN = 0, RW=1 for read from LCD, RS=0 for command not data
	LCD_CTRL |=  (1<<RW_SWITCH);
     182:	88 b3       	in	r24, 0x18	; 24
     184:	84 60       	ori	r24, 0x04	; 4
     186:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &=  (~(1<<EN_SWITCH | 1<<RS_SWITCH));
     188:	88 b3       	in	r24, 0x18	; 24
     18a:	85 7f       	andi	r24, 0xF5	; 245
     18c:	88 bb       	out	0x18, r24	; 24
	// wait as it busy (busy as bit7 = 1 which mean port has value 0x80 or more)
//	while(LCD_PORT >= 0x80)
	//{
		LCD_Kick();
     18e:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
	#ifdef EIGHT_BIT_MODE
		DataDir_LCD_PORT |= 0xFF;
	#endif
		
	#ifdef FOUR_BIT_MODE
		LCD_Kick();
     192:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
		DataDir_LCD_PORT |= 0xF0;
     196:	8a b3       	in	r24, 0x1a	; 26
     198:	80 6f       	ori	r24, 0xF0	; 240
     19a:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	LCD_CTRL &=  (~(1<<RW_SWITCH));
     19c:	88 b3       	in	r24, 0x18	; 24
     19e:	8b 7f       	andi	r24, 0xFB	; 251
     1a0:	88 bb       	out	0x18, r24	; 24
     1a2:	08 95       	ret

000001a4 <LCD_Write_Commend>:
		}
	}
}

void LCD_Write_Commend(unsigned char command)
{
     1a4:	cf 93       	push	r28
     1a6:	c8 2f       	mov	r28, r24
	LCD_IsBusy();
     1a8:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_IsBusy>
	#endif
	
	#ifdef FOUR_BIT_MODE

	// ============================== Send MSBs ==============================
		LCD_PORT = (LCD_PORT&0x0F)|(command & 0xF0);
     1ac:	8b b3       	in	r24, 0x1b	; 27
     1ae:	8f 70       	andi	r24, 0x0F	; 15
     1b0:	9c 2f       	mov	r25, r28
     1b2:	90 7f       	andi	r25, 0xF0	; 240
     1b4:	89 2b       	or	r24, r25
     1b6:	8b bb       	out	0x1b, r24	; 27
		// RW=0 for write LCD, RS=0 for command not data
		LCD_CTRL &=  (~((1<<RW_SWITCH) | (1<<RS_SWITCH)));
     1b8:	88 b3       	in	r24, 0x18	; 24
     1ba:	89 7f       	andi	r24, 0xF9	; 249
     1bc:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
     1be:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
	// ============================== Send LSBs ==============================		
		LCD_PORT = (LCD_PORT&0x0F)| (command<<DATA_SHIFT);
     1c2:	2b b3       	in	r18, 0x1b	; 27
     1c4:	30 e1       	ldi	r19, 0x10	; 16
     1c6:	c3 9f       	mul	r28, r19
     1c8:	c0 01       	movw	r24, r0
     1ca:	11 24       	eor	r1, r1
     1cc:	92 2f       	mov	r25, r18
     1ce:	9f 70       	andi	r25, 0x0F	; 15
     1d0:	89 2b       	or	r24, r25
     1d2:	8b bb       	out	0x1b, r24	; 27
		// RW=0 for write LCD, RS=0 for command not data
		LCD_CTRL &=  (~((1<<RW_SWITCH) | (1<<RS_SWITCH)));
     1d4:	88 b3       	in	r24, 0x18	; 24
     1d6:	89 7f       	andi	r24, 0xF9	; 249
     1d8:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
     1da:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
	#endif
	
}
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <LCD_CLear_Screen>:
	LCD_CTRL &=  (~(1<<EN_SWITCH));
}

void LCD_CLear_Screen(void)
{
	LCD_Write_Commend(LCD_CLEAR_SCREEN_CODE);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
     1e8:	08 95       	ret

000001ea <LCD_Init>:

void LCD_Init(void)
{
	
	// The 3 CTRL bits are output
	DataDir_LCD_CTRL |=  (1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH);
     1ea:	87 b3       	in	r24, 0x17	; 23
     1ec:	8e 60       	ori	r24, 0x0E	; 14
     1ee:	87 bb       	out	0x17, r24	; 23
     1f0:	87 e8       	ldi	r24, 0x87	; 135
     1f2:	93 e1       	ldi	r25, 0x13	; 19
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Init+0xa>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Init+0x10>
     1fa:	00 00       	nop
	_delay_ms(20);

	//LCD_IsBusy();

	// The CTRL is send xxxx000x which mean WriteOnLCD- WriteCommand- disable
	LCD_CTRL &=  (~(1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH));
     1fc:	88 b3       	in	r24, 0x18	; 24
     1fe:	81 7f       	andi	r24, 0xF1	; 241
     200:	88 bb       	out	0x18, r24	; 24
	// The 8 bits of port are output
	DataDir_LCD_PORT = 0xff;
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	8a bb       	out	0x1a, r24	; 26
     206:	87 e8       	ldi	r24, 0x87	; 135
     208:	93 e1       	ldi	r25, 0x13	; 19
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_Init+0x20>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_Init+0x26>
     210:	00 00       	nop
	_delay_ms(20);
	LCD_CLear_Screen();
     212:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
		LCD_Write_Commend(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
//		LCD_PORT = FUNCTION_SET_4BIT;
		LCD_Write_Commend(0x02);
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
		//_delay_ms(50);
		LCD_Write_Commend(LCD_FUNCTION_4BIT_2LINES);
     21c:	88 e2       	ldi	r24, 0x28	; 40
     21e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
	#endif
	// ============================== Cursor ==============================

	LCD_Write_Commend(LCD_ENTRY_MODE);
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
	LCD_Write_Commend(LCD_BEGIN_AT_FIRST_ROW);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
	LCD_Write_Commend(LCD_DISP_ON_CURSOR_BLINK);
     22e:	8f e0       	ldi	r24, 0x0F	; 15
     230:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
     234:	08 95       	ret

00000236 <LCD_GotoXY>:
	LCD_Write_Commend(LCD_CLEAR_SCREEN_CODE);
}

void LCD_GotoXY(unsigned char line, unsigned char position)
{
	if (line == 0)
     236:	81 11       	cpse	r24, r1
     238:	07 c0       	rjmp	.+14     	; 0x248 <LCD_GotoXY+0x12>
	{
		if (position >=0 && position < 16)
     23a:	60 31       	cpi	r22, 0x10	; 16
     23c:	68 f4       	brcc	.+26     	; 0x258 <LCD_GotoXY+0x22>
		{
			LCD_Write_Commend(LCD_LINE0_BASE_ADDRESS + position);
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	86 0f       	add	r24, r22
     242:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
     246:	08 95       	ret
		}
	}
	else if (line == 1)
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	31 f4       	brne	.+12     	; 0x258 <LCD_GotoXY+0x22>
	{
		if (position >=0 && position < 16)
     24c:	60 31       	cpi	r22, 0x10	; 16
     24e:	20 f4       	brcc	.+8      	; 0x258 <LCD_GotoXY+0x22>
		{
			LCD_Write_Commend(LCD_LINE1_BASE_ADDRESS + position);
     250:	80 ec       	ldi	r24, 0xC0	; 192
     252:	86 0f       	add	r24, r22
     254:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Write_Commend>
     258:	08 95       	ret

0000025a <LCD_Write_Char>:
	#endif
	
}

void LCD_Write_Char(unsigned char c)
{
     25a:	cf 93       	push	r28
     25c:	c8 2f       	mov	r28, r24
	LCD_IsBusy();
     25e:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_IsBusy>
	#endif
	
	#ifdef FOUR_BIT_MODE

	// RW=0 for write LCD, RS=1 for command not data
	LCD_CTRL |=  (1<<RS_SWITCH);
     262:	88 b3       	in	r24, 0x18	; 24
     264:	82 60       	ori	r24, 0x02	; 2
     266:	88 bb       	out	0x18, r24	; 24
	// ============================== Send MSBs ==============================
		LCD_PORT = (LCD_PORT & 0x0F) | (c & 0xF0);
     268:	8b b3       	in	r24, 0x1b	; 27
     26a:	8f 70       	andi	r24, 0x0F	; 15
     26c:	9c 2f       	mov	r25, r28
     26e:	90 7f       	andi	r25, 0xF0	; 240
     270:	89 2b       	or	r24, r25
     272:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &=  (~(1<<RW_SWITCH));
     274:	88 b3       	in	r24, 0x18	; 24
     276:	8b 7f       	andi	r24, 0xFB	; 251
     278:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL |= (1<<RS_SWITCH);
     27a:	88 b3       	in	r24, 0x18	; 24
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
     280:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
	// ============================== Send LSBs ==============================
		LCD_PORT = (LCD_PORT & 0x0F) | (c << DATA_SHIFT);
     284:	2b b3       	in	r18, 0x1b	; 27
     286:	30 e1       	ldi	r19, 0x10	; 16
     288:	c3 9f       	mul	r28, r19
     28a:	c0 01       	movw	r24, r0
     28c:	11 24       	eor	r1, r1
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &=  (~(1<<RW_SWITCH));
     296:	88 b3       	in	r24, 0x18	; 24
     298:	8b 7f       	andi	r24, 0xFB	; 251
     29a:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL |= (1<<RS_SWITCH);
     29c:	88 b3       	in	r24, 0x18	; 24
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
     2a2:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Kick>
	#endif

}
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <LCD_Write_String>:

void LCD_Write_String(char* str)
{
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	8c 01       	movw	r16, r24
	unsigned char count=0;
     2b2:	c0 e0       	ldi	r28, 0x00	; 0
	while (*str > 0)
     2b4:	15 c0       	rjmp	.+42     	; 0x2e0 <LCD_Write_String+0x36>
	{
		count++;
     2b6:	cf 5f       	subi	r28, 0xFF	; 255
		LCD_Write_Char(*str++);
     2b8:	0f 5f       	subi	r16, 0xFF	; 255
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
     2bc:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Write_Char>
		// check if line is full
		if (count == 16)
     2c0:	c0 31       	cpi	r28, 0x10	; 16
     2c2:	29 f4       	brne	.+10     	; 0x2ce <LCD_Write_String+0x24>
		{
			LCD_GotoXY(1,0);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_GotoXY>
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <LCD_Write_String+0x36>
		}
		else if (count >= 32)
     2ce:	c0 32       	cpi	r28, 0x20	; 32
     2d0:	38 f0       	brcs	.+14     	; 0x2e0 <LCD_Write_String+0x36>
		{
			LCD_CLear_Screen();
     2d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
			LCD_GotoXY(0,0);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_GotoXY>
			count = 0;
     2de:	c0 e0       	ldi	r28, 0x00	; 0
}

void LCD_Write_String(char* str)
{
	unsigned char count=0;
	while (*str > 0)
     2e0:	f8 01       	movw	r30, r16
     2e2:	80 81       	ld	r24, Z
     2e4:	81 11       	cpse	r24, r1
     2e6:	e7 cf       	rjmp	.-50     	; 0x2b6 <LCD_Write_String+0xc>
			LCD_GotoXY(0,0);
			count = 0;
		}
		
	}
}
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <LCD_Write_Number>:

void LCD_Write_Number(int Number)
{
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	2f 97       	sbiw	r28, 0x0f	; 15
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	char str[15];
	sprintf(str,"%d",Number);
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	8f e7       	ldi	r24, 0x7F	; 127
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	9f 93       	push	r25
     312:	8f 93       	push	r24
     314:	8e 01       	movw	r16, r28
     316:	0f 5f       	subi	r16, 0xFF	; 255
     318:	1f 4f       	sbci	r17, 0xFF	; 255
     31a:	1f 93       	push	r17
     31c:	0f 93       	push	r16
     31e:	0e 94 56 05 	call	0xaac	; 0xaac <sprintf>
	LCD_Write_String(str);
     322:	c8 01       	movw	r24, r16
     324:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
}
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	2f 96       	adiw	r28, 0x0f	; 15
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	08 95       	ret

0000034a <LCD_Write_Real_Number>:

void LCD_Write_Real_Number(double Number)
{
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	60 97       	sbiw	r28, 0x10	; 16
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	6b 01       	movw	r12, r22
     374:	7c 01       	movw	r14, r24
	char str[16];
	char* sign = Number<0?"-":"";
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	a9 01       	movw	r20, r18
     37c:	0e 94 8a 03 	call	0x714	; 0x714 <__cmpsf2>
     380:	88 23       	and	r24, r24
     382:	1c f4       	brge	.+6      	; 0x38a <LCD_Write_Real_Number+0x40>
     384:	08 e7       	ldi	r16, 0x78	; 120
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	02 c0       	rjmp	.+4      	; 0x38e <LCD_Write_Real_Number+0x44>
     38a:	09 ea       	ldi	r16, 0xA9	; 169
     38c:	10 e0       	ldi	r17, 0x00	; 0
	
	float absNum = Number<0? -Number:Number;
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	a9 01       	movw	r20, r18
     394:	c7 01       	movw	r24, r14
     396:	b6 01       	movw	r22, r12
     398:	0e 94 8a 03 	call	0x714	; 0x714 <__cmpsf2>
     39c:	88 23       	and	r24, r24
     39e:	24 f4       	brge	.+8      	; 0x3a8 <LCD_Write_Real_Number+0x5e>
     3a0:	f7 fa       	bst	r15, 7
     3a2:	f0 94       	com	r15
     3a4:	f7 f8       	bld	r15, 7
     3a6:	f0 94       	com	r15
	int intNum = (int)absNum;
     3a8:	c7 01       	movw	r24, r14
     3aa:	b6 01       	movw	r22, r12
     3ac:	0e 94 01 04 	call	0x802	; 0x802 <__fixsfsi>
     3b0:	4b 01       	movw	r8, r22
     3b2:	5c 01       	movw	r10, r24
	int floatNum = (absNum - intNum)*100;
     3b4:	07 2e       	mov	r0, r23
     3b6:	00 0c       	add	r0, r0
     3b8:	88 0b       	sbc	r24, r24
     3ba:	99 0b       	sbc	r25, r25
     3bc:	0e 94 39 04 	call	0x872	; 0x872 <__floatsisf>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	0e 94 1d 03 	call	0x63a	; 0x63a <__subsf3>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	48 ec       	ldi	r20, 0xC8	; 200
     3d2:	52 e4       	ldi	r21, 0x42	; 66
     3d4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
     3d8:	0e 94 01 04 	call	0x802	; 0x802 <__fixsfsi>
	sprintf(str,"%s%d.%d",sign,intNum,floatNum);
     3dc:	7f 93       	push	r23
     3de:	6f 93       	push	r22
     3e0:	9f 92       	push	r9
     3e2:	8f 92       	push	r8
     3e4:	1f 93       	push	r17
     3e6:	0f 93       	push	r16
     3e8:	8a e7       	ldi	r24, 0x7A	; 122
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	8e 01       	movw	r16, r28
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
     3f6:	1f 93       	push	r17
     3f8:	0f 93       	push	r16
     3fa:	0e 94 56 05 	call	0xaac	; 0xaac <sprintf>
	LCD_Write_String(str);
     3fe:	c8 01       	movw	r24, r16
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
}
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	60 96       	adiw	r28, 0x10	; 16
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	08 95       	ret

00000434 <main>:



int main(void)
{
	LCD_Init();
     434:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Init>
	Keypad_init();
     438:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
     43c:	83 ed       	ldi	r24, 0xD3	; 211
     43e:	90 e3       	ldi	r25, 0x30	; 48
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <main+0xc>
     444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x12>
     446:	00 00       	nop
	_delay_ms(50);
	LCD_Write_String("Hello, I'm Andrew Adel");
     448:	82 e8       	ldi	r24, 0x82	; 130
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
	LCD_CLear_Screen();
     450:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
	LCD_Write_String("   Calculator   ");
     454:	89 e9       	ldi	r24, 0x99	; 153
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
     45c:	8f e4       	ldi	r24, 0x4F	; 79
     45e:	93 ec       	ldi	r25, 0xC3	; 195
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <main+0x2c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <main+0x32>
     466:	00 00       	nop
	_delay_ms(200);
	LCD_CLear_Screen();
     468:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
	LCD_Write_String("Enter");
     46c:	8a ea       	ldi	r24, 0xAA	; 170
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
	LCD_GotoXY(1,0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_GotoXY>
	LCD_Write_String("Calculation:");
     47c:	80 eb       	ldi	r24, 0xB0	; 176
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Write_String>
     484:	9f e9       	ldi	r25, 0x9F	; 159
     486:	26 e8       	ldi	r18, 0x86	; 134
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	91 50       	subi	r25, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <main+0x56>
     492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x60>
     494:	00 00       	nop
	_delay_ms(500);
	LCD_CLear_Screen();
     496:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
	int LHS=0, RHS=0;
	float res = 0;
	int p=0;
	int temp = 0;
	unsigned char operator=0;
	unsigned char END_FLAG=0;
     49a:	c1 2c       	mov	r12, r1
	unsigned char key_pressed;
	int LHS=0, RHS=0;
	float res = 0;
	int p=0;
	int temp = 0;
	unsigned char operator=0;
     49c:	d1 2c       	mov	r13, r1
	unsigned char count = 0;
	unsigned char key_pressed;
	int LHS=0, RHS=0;
	float res = 0;
	int p=0;
	int temp = 0;
     49e:	a1 2c       	mov	r10, r1
     4a0:	b1 2c       	mov	r11, r1

	unsigned char count = 0;
	unsigned char key_pressed;
	int LHS=0, RHS=0;
	float res = 0;
	int p=0;
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(500);
	LCD_CLear_Screen();

	unsigned char count = 0;
	unsigned char key_pressed;
	int LHS=0, RHS=0;
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
	LCD_GotoXY(1,0);
	LCD_Write_String("Calculation:");
	_delay_ms(500);
	LCD_CLear_Screen();

	unsigned char count = 0;
     4aa:	d0 e0       	ldi	r29, 0x00	; 0
	int temp = 0;
	unsigned char operator=0;
	unsigned char END_FLAG=0;
    while (1) 
    {
		key_pressed = Keypad_getkey();
     4ac:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_getkey>
     4b0:	c8 2f       	mov	r28, r24
		if (count == 16)
     4b2:	d0 31       	cpi	r29, 0x10	; 16
     4b4:	21 f4       	brne	.+8      	; 0x4be <main+0x8a>
		{
			LCD_GotoXY(1,0);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_GotoXY>
		}
		if (count >31)
     4be:	d0 32       	cpi	r29, 0x20	; 32
     4c0:	30 f0       	brcs	.+12     	; 0x4ce <main+0x9a>
		{
			LCD_CLear_Screen();
     4c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
			count = 0;
			operator = 0;
     4c6:	d1 2c       	mov	r13, r1
			p = 0;
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
			LCD_GotoXY(1,0);
		}
		if (count >31)
		{
			LCD_CLear_Screen();
			count = 0;
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
			operator = 0;
			p = 0;
		}
		switch(key_pressed){
     4ce:	ce 34       	cpi	r28, 0x4E	; 78
     4d0:	69 f3       	breq	.-38     	; 0x4ac <main+0x78>
     4d2:	cf 36       	cpi	r28, 0x6F	; 111
     4d4:	21 f0       	breq	.+8      	; 0x4de <main+0xaa>
     4d6:	cd 33       	cpi	r28, 0x3D	; 61
     4d8:	09 f0       	breq	.+2      	; 0x4dc <main+0xa8>
     4da:	5f c0       	rjmp	.+190    	; 0x59a <main+0x166>
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <main+0xbe>
			case 'N':
				break;
			case 'o':
				LCD_CLear_Screen();
     4de:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
				count = 0;
				p = 0;
				LHS = RHS = 0;
				temp = 0;
     4e2:	a1 2c       	mov	r10, r1
     4e4:	b1 2c       	mov	r11, r1
			case 'N':
				break;
			case 'o':
				LCD_CLear_Screen();
				count = 0;
				p = 0;
     4e6:	00 e0       	ldi	r16, 0x00	; 0
     4e8:	10 e0       	ldi	r17, 0x00	; 0
				LHS = RHS = 0;
     4ea:	e1 2c       	mov	r14, r1
     4ec:	f1 2c       	mov	r15, r1
		switch(key_pressed){
			case 'N':
				break;
			case 'o':
				LCD_CLear_Screen();
				count = 0;
     4ee:	d0 e0       	ldi	r29, 0x00	; 0
				p = 0;
				LHS = RHS = 0;
				temp = 0;
				break;
     4f0:	dd cf       	rjmp	.-70     	; 0x4ac <main+0x78>
			case '=':
				if ( (p > 0) )
     4f2:	10 16       	cp	r1, r16
     4f4:	11 06       	cpc	r1, r17
     4f6:	d4 f6       	brge	.-76     	; 0x4ac <main+0x78>
				{
					if ((operator != 0))
     4f8:	dd 20       	and	r13, r13
     4fa:	c1 f2       	breq	.-80     	; 0x4ac <main+0x78>
					{
						RHS = temp;
						temp = 0;
						p = 0;
						LCD_Write_Char(key_pressed);
     4fc:	8c 2f       	mov	r24, r28
     4fe:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Write_Char>
						count++;

						switch(operator){
     502:	9b e2       	ldi	r25, 0x2B	; 43
     504:	d9 16       	cp	r13, r25
     506:	69 f0       	breq	.+26     	; 0x522 <main+0xee>
     508:	9d 15       	cp	r25, r13
     50a:	20 f0       	brcs	.+8      	; 0x514 <main+0xe0>
     50c:	2a e2       	ldi	r18, 0x2A	; 42
     50e:	d2 16       	cp	r13, r18
     510:	a1 f0       	breq	.+40     	; 0x53a <main+0x106>
     512:	34 c0       	rjmp	.+104    	; 0x57c <main+0x148>
     514:	8d e2       	ldi	r24, 0x2D	; 45
     516:	d8 16       	cp	r13, r24
     518:	51 f0       	breq	.+20     	; 0x52e <main+0xfa>
     51a:	9f e2       	ldi	r25, 0x2F	; 47
     51c:	d9 16       	cp	r13, r25
     51e:	b9 f0       	breq	.+46     	; 0x54e <main+0x11a>
     520:	2d c0       	rjmp	.+90     	; 0x57c <main+0x148>
							case '+':
							LCD_Write_Number(LHS+RHS);
     522:	c7 01       	movw	r24, r14
     524:	8a 0d       	add	r24, r10
     526:	9b 1d       	adc	r25, r11
     528:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Write_Number>
							break;
     52c:	27 c0       	rjmp	.+78     	; 0x57c <main+0x148>
							case '-':
							LCD_Write_Number(LHS-RHS);
     52e:	c7 01       	movw	r24, r14
     530:	8a 19       	sub	r24, r10
     532:	9b 09       	sbc	r25, r11
     534:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Write_Number>
							break;
     538:	21 c0       	rjmp	.+66     	; 0x57c <main+0x148>
							case '*':
							LCD_Write_Number(LHS*RHS);
     53a:	ea 9c       	mul	r14, r10
     53c:	c0 01       	movw	r24, r0
     53e:	eb 9c       	mul	r14, r11
     540:	90 0d       	add	r25, r0
     542:	fa 9c       	mul	r15, r10
     544:	90 0d       	add	r25, r0
     546:	11 24       	eor	r1, r1
     548:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Write_Number>
							break;
     54c:	17 c0       	rjmp	.+46     	; 0x57c <main+0x148>
							case '/':
							res = ((float)LHS)/((float)RHS);
     54e:	b7 01       	movw	r22, r14
     550:	0f 2c       	mov	r0, r15
     552:	00 0c       	add	r0, r0
     554:	88 0b       	sbc	r24, r24
     556:	99 0b       	sbc	r25, r25
     558:	0e 94 39 04 	call	0x872	; 0x872 <__floatsisf>
     55c:	2b 01       	movw	r4, r22
     55e:	3c 01       	movw	r6, r24
     560:	b5 01       	movw	r22, r10
     562:	bb 0c       	add	r11, r11
     564:	88 0b       	sbc	r24, r24
     566:	99 0b       	sbc	r25, r25
     568:	0e 94 39 04 	call	0x872	; 0x872 <__floatsisf>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 8f 03 	call	0x71e	; 0x71e <__divsf3>
							LCD_Write_Real_Number(res);
     578:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_Write_Real_Number>
							break;
						}
						END_FLAG = 1;
						count++;
     57c:	de 5f       	subi	r29, 0xFE	; 254
     57e:	8b e7       	ldi	r24, 0x7B	; 123
     580:	92 e9       	ldi	r25, 0x92	; 146
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <main+0x14e>
     586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x154>
     588:	00 00       	nop
							case '/':
							res = ((float)LHS)/((float)RHS);
							LCD_Write_Real_Number(res);
							break;
						}
						END_FLAG = 1;
     58a:	cc 24       	eor	r12, r12
     58c:	c3 94       	inc	r12
						count++;
						operator = 0;
     58e:	d1 2c       	mov	r13, r1
				if ( (p > 0) )
				{
					if ((operator != 0))
					{
						RHS = temp;
						temp = 0;
     590:	a1 2c       	mov	r10, r1
     592:	b1 2c       	mov	r11, r1
						p = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	89 cf       	rjmp	.-238    	; 0x4ac <main+0x78>
						_delay_ms(150);
					}
				}
				break;
			default:
				if(key_pressed >= '0' && key_pressed<= '9')
     59a:	80 ed       	ldi	r24, 0xD0	; 208
     59c:	8c 0f       	add	r24, r28
     59e:	8a 30       	cpi	r24, 0x0A	; 10
     5a0:	a0 f5       	brcc	.+104    	; 0x60a <main+0x1d6>
				{
					if(END_FLAG ==1){
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	c9 12       	cpse	r12, r25
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <main+0x17c>
						END_FLAG = 0;
						LCD_CLear_Screen();
     5a8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_CLear_Screen>
				break;
			default:
				if(key_pressed >= '0' && key_pressed<= '9')
				{
					if(END_FLAG ==1){
						END_FLAG = 0;
     5ac:	c1 2c       	mov	r12, r1
						LCD_CLear_Screen();
						count = 0;
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
					}
					if (p<16)
     5b0:	00 31       	cpi	r16, 0x10	; 16
     5b2:	11 05       	cpc	r17, r1
     5b4:	0c f0       	brlt	.+2      	; 0x5b8 <main+0x184>
     5b6:	7a cf       	rjmp	.-268    	; 0x4ac <main+0x78>
					{
						LCD_Write_Char(key_pressed);
     5b8:	8c 2f       	mov	r24, r28
     5ba:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Write_Char>
						if (p == 0)
     5be:	01 15       	cp	r16, r1
     5c0:	11 05       	cpc	r17, r1
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <main+0x19e>
						{
							temp = key_pressed-'0';
     5c4:	8c 2f       	mov	r24, r28
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	5c 01       	movw	r10, r24
     5ca:	20 e3       	ldi	r18, 0x30	; 48
     5cc:	a2 1a       	sub	r10, r18
     5ce:	b1 08       	sbc	r11, r1
     5d0:	12 c0       	rjmp	.+36     	; 0x5f6 <main+0x1c2>
						}
						else
						{
							temp = (temp*10) + (key_pressed-'0');
     5d2:	b5 01       	movw	r22, r10
     5d4:	66 0f       	add	r22, r22
     5d6:	77 1f       	adc	r23, r23
     5d8:	c5 01       	movw	r24, r10
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	5b 01       	movw	r10, r22
     5e8:	a8 0e       	add	r10, r24
     5ea:	b9 1e       	adc	r11, r25
     5ec:	8c 2f       	mov	r24, r28
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	c0 97       	sbiw	r24, 0x30	; 48
     5f2:	a8 0e       	add	r10, r24
     5f4:	b9 1e       	adc	r11, r25
						}
						p++;
     5f6:	0f 5f       	subi	r16, 0xFF	; 255
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
						count++;
     5fa:	df 5f       	subi	r29, 0xFF	; 255
     5fc:	83 e2       	ldi	r24, 0x23	; 35
     5fe:	94 ef       	ldi	r25, 0xF4	; 244
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <main+0x1cc>
     604:	00 c0       	rjmp	.+0      	; 0x606 <main+0x1d2>
     606:	00 00       	nop
     608:	51 cf       	rjmp	.-350    	; 0x4ac <main+0x78>
						_delay_ms(250);
						break;
					}
				}
				else if(p>0)
     60a:	10 16       	cp	r1, r16
     60c:	11 06       	cpc	r1, r17
     60e:	0c f0       	brlt	.+2      	; 0x612 <main+0x1de>
     610:	4d cf       	rjmp	.-358    	; 0x4ac <main+0x78>
				{
					if (operator != 0)
     612:	dd 20       	and	r13, r13
     614:	39 f0       	breq	.+14     	; 0x624 <main+0x1f0>
					{
						LCD_GotoXY(count/16, count%16);
     616:	6d 2f       	mov	r22, r29
     618:	6f 70       	andi	r22, 0x0F	; 15
     61a:	8d 2f       	mov	r24, r29
     61c:	82 95       	swap	r24
     61e:	8f 70       	andi	r24, 0x0F	; 15
     620:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_GotoXY>
					}
					operator = key_pressed;
					LHS = temp;
					temp = 0;
					p = 0;
					LCD_Write_Char(key_pressed);
     624:	8c 2f       	mov	r24, r28
     626:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Write_Char>
					count++;
     62a:	df 5f       	subi	r29, 0xFF	; 255
				{
					if (operator != 0)
					{
						LCD_GotoXY(count/16, count%16);
					}
					operator = key_pressed;
     62c:	dc 2e       	mov	r13, r28
					LHS = temp;
     62e:	75 01       	movw	r14, r10
					temp = 0;
     630:	a1 2c       	mov	r10, r1
     632:	b1 2c       	mov	r11, r1
					p = 0;
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	39 cf       	rjmp	.-398    	; 0x4ac <main+0x78>

0000063a <__subsf3>:
     63a:	50 58       	subi	r21, 0x80	; 128

0000063c <__addsf3>:
     63c:	bb 27       	eor	r27, r27
     63e:	aa 27       	eor	r26, r26
     640:	0e 94 35 03 	call	0x66a	; 0x66a <__addsf3x>
     644:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     648:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     64c:	38 f0       	brcs	.+14     	; 0x65c <__addsf3+0x20>
     64e:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     652:	20 f0       	brcs	.+8      	; 0x65c <__addsf3+0x20>
     654:	39 f4       	brne	.+14     	; 0x664 <__addsf3+0x28>
     656:	9f 3f       	cpi	r25, 0xFF	; 255
     658:	19 f4       	brne	.+6      	; 0x660 <__addsf3+0x24>
     65a:	26 f4       	brtc	.+8      	; 0x664 <__addsf3+0x28>
     65c:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
     660:	0e f4       	brtc	.+2      	; 0x664 <__addsf3+0x28>
     662:	e0 95       	com	r30
     664:	e7 fb       	bst	r30, 7
     666:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>

0000066a <__addsf3x>:
     66a:	e9 2f       	mov	r30, r25
     66c:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     670:	58 f3       	brcs	.-42     	; 0x648 <__addsf3+0xc>
     672:	ba 17       	cp	r27, r26
     674:	62 07       	cpc	r22, r18
     676:	73 07       	cpc	r23, r19
     678:	84 07       	cpc	r24, r20
     67a:	95 07       	cpc	r25, r21
     67c:	20 f0       	brcs	.+8      	; 0x686 <__addsf3x+0x1c>
     67e:	79 f4       	brne	.+30     	; 0x69e <__addsf3x+0x34>
     680:	a6 f5       	brtc	.+104    	; 0x6ea <__addsf3x+0x80>
     682:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     686:	0e f4       	brtc	.+2      	; 0x68a <__addsf3x+0x20>
     688:	e0 95       	com	r30
     68a:	0b 2e       	mov	r0, r27
     68c:	ba 2f       	mov	r27, r26
     68e:	a0 2d       	mov	r26, r0
     690:	0b 01       	movw	r0, r22
     692:	b9 01       	movw	r22, r18
     694:	90 01       	movw	r18, r0
     696:	0c 01       	movw	r0, r24
     698:	ca 01       	movw	r24, r20
     69a:	a0 01       	movw	r20, r0
     69c:	11 24       	eor	r1, r1
     69e:	ff 27       	eor	r31, r31
     6a0:	59 1b       	sub	r21, r25
     6a2:	99 f0       	breq	.+38     	; 0x6ca <__addsf3x+0x60>
     6a4:	59 3f       	cpi	r21, 0xF9	; 249
     6a6:	50 f4       	brcc	.+20     	; 0x6bc <__addsf3x+0x52>
     6a8:	50 3e       	cpi	r21, 0xE0	; 224
     6aa:	68 f1       	brcs	.+90     	; 0x706 <__addsf3x+0x9c>
     6ac:	1a 16       	cp	r1, r26
     6ae:	f0 40       	sbci	r31, 0x00	; 0
     6b0:	a2 2f       	mov	r26, r18
     6b2:	23 2f       	mov	r18, r19
     6b4:	34 2f       	mov	r19, r20
     6b6:	44 27       	eor	r20, r20
     6b8:	58 5f       	subi	r21, 0xF8	; 248
     6ba:	f3 cf       	rjmp	.-26     	; 0x6a2 <__addsf3x+0x38>
     6bc:	46 95       	lsr	r20
     6be:	37 95       	ror	r19
     6c0:	27 95       	ror	r18
     6c2:	a7 95       	ror	r26
     6c4:	f0 40       	sbci	r31, 0x00	; 0
     6c6:	53 95       	inc	r21
     6c8:	c9 f7       	brne	.-14     	; 0x6bc <__addsf3x+0x52>
     6ca:	7e f4       	brtc	.+30     	; 0x6ea <__addsf3x+0x80>
     6cc:	1f 16       	cp	r1, r31
     6ce:	ba 0b       	sbc	r27, r26
     6d0:	62 0b       	sbc	r22, r18
     6d2:	73 0b       	sbc	r23, r19
     6d4:	84 0b       	sbc	r24, r20
     6d6:	ba f0       	brmi	.+46     	; 0x706 <__addsf3x+0x9c>
     6d8:	91 50       	subi	r25, 0x01	; 1
     6da:	a1 f0       	breq	.+40     	; 0x704 <__addsf3x+0x9a>
     6dc:	ff 0f       	add	r31, r31
     6de:	bb 1f       	adc	r27, r27
     6e0:	66 1f       	adc	r22, r22
     6e2:	77 1f       	adc	r23, r23
     6e4:	88 1f       	adc	r24, r24
     6e6:	c2 f7       	brpl	.-16     	; 0x6d8 <__addsf3x+0x6e>
     6e8:	0e c0       	rjmp	.+28     	; 0x706 <__addsf3x+0x9c>
     6ea:	ba 0f       	add	r27, r26
     6ec:	62 1f       	adc	r22, r18
     6ee:	73 1f       	adc	r23, r19
     6f0:	84 1f       	adc	r24, r20
     6f2:	48 f4       	brcc	.+18     	; 0x706 <__addsf3x+0x9c>
     6f4:	87 95       	ror	r24
     6f6:	77 95       	ror	r23
     6f8:	67 95       	ror	r22
     6fa:	b7 95       	ror	r27
     6fc:	f7 95       	ror	r31
     6fe:	9e 3f       	cpi	r25, 0xFE	; 254
     700:	08 f0       	brcs	.+2      	; 0x704 <__addsf3x+0x9a>
     702:	b0 cf       	rjmp	.-160    	; 0x664 <__addsf3+0x28>
     704:	93 95       	inc	r25
     706:	88 0f       	add	r24, r24
     708:	08 f0       	brcs	.+2      	; 0x70c <__addsf3x+0xa2>
     70a:	99 27       	eor	r25, r25
     70c:	ee 0f       	add	r30, r30
     70e:	97 95       	ror	r25
     710:	87 95       	ror	r24
     712:	08 95       	ret

00000714 <__cmpsf2>:
     714:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_cmp>
     718:	08 f4       	brcc	.+2      	; 0x71c <__cmpsf2+0x8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	08 95       	ret

0000071e <__divsf3>:
     71e:	0e 94 a3 03 	call	0x746	; 0x746 <__divsf3x>
     722:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     726:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     72a:	58 f0       	brcs	.+22     	; 0x742 <__divsf3+0x24>
     72c:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     730:	40 f0       	brcs	.+16     	; 0x742 <__divsf3+0x24>
     732:	29 f4       	brne	.+10     	; 0x73e <__divsf3+0x20>
     734:	5f 3f       	cpi	r21, 0xFF	; 255
     736:	29 f0       	breq	.+10     	; 0x742 <__divsf3+0x24>
     738:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     73c:	51 11       	cpse	r21, r1
     73e:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     742:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>

00000746 <__divsf3x>:
     746:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     74a:	68 f3       	brcs	.-38     	; 0x726 <__divsf3+0x8>

0000074c <__divsf3_pse>:
     74c:	99 23       	and	r25, r25
     74e:	b1 f3       	breq	.-20     	; 0x73c <__divsf3+0x1e>
     750:	55 23       	and	r21, r21
     752:	91 f3       	breq	.-28     	; 0x738 <__divsf3+0x1a>
     754:	95 1b       	sub	r25, r21
     756:	55 0b       	sbc	r21, r21
     758:	bb 27       	eor	r27, r27
     75a:	aa 27       	eor	r26, r26
     75c:	62 17       	cp	r22, r18
     75e:	73 07       	cpc	r23, r19
     760:	84 07       	cpc	r24, r20
     762:	38 f0       	brcs	.+14     	; 0x772 <__divsf3_pse+0x26>
     764:	9f 5f       	subi	r25, 0xFF	; 255
     766:	5f 4f       	sbci	r21, 0xFF	; 255
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	44 1f       	adc	r20, r20
     76e:	aa 1f       	adc	r26, r26
     770:	a9 f3       	breq	.-22     	; 0x75c <__divsf3_pse+0x10>
     772:	35 d0       	rcall	.+106    	; 0x7de <__divsf3_pse+0x92>
     774:	0e 2e       	mov	r0, r30
     776:	3a f0       	brmi	.+14     	; 0x786 <__divsf3_pse+0x3a>
     778:	e0 e8       	ldi	r30, 0x80	; 128
     77a:	32 d0       	rcall	.+100    	; 0x7e0 <__divsf3_pse+0x94>
     77c:	91 50       	subi	r25, 0x01	; 1
     77e:	50 40       	sbci	r21, 0x00	; 0
     780:	e6 95       	lsr	r30
     782:	00 1c       	adc	r0, r0
     784:	ca f7       	brpl	.-14     	; 0x778 <__divsf3_pse+0x2c>
     786:	2b d0       	rcall	.+86     	; 0x7de <__divsf3_pse+0x92>
     788:	fe 2f       	mov	r31, r30
     78a:	29 d0       	rcall	.+82     	; 0x7de <__divsf3_pse+0x92>
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	88 1f       	adc	r24, r24
     792:	bb 1f       	adc	r27, r27
     794:	26 17       	cp	r18, r22
     796:	37 07       	cpc	r19, r23
     798:	48 07       	cpc	r20, r24
     79a:	ab 07       	cpc	r26, r27
     79c:	b0 e8       	ldi	r27, 0x80	; 128
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__divsf3_pse+0x56>
     7a0:	bb 0b       	sbc	r27, r27
     7a2:	80 2d       	mov	r24, r0
     7a4:	bf 01       	movw	r22, r30
     7a6:	ff 27       	eor	r31, r31
     7a8:	93 58       	subi	r25, 0x83	; 131
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	3a f0       	brmi	.+14     	; 0x7bc <__divsf3_pse+0x70>
     7ae:	9e 3f       	cpi	r25, 0xFE	; 254
     7b0:	51 05       	cpc	r21, r1
     7b2:	78 f0       	brcs	.+30     	; 0x7d2 <__divsf3_pse+0x86>
     7b4:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     7b8:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     7bc:	5f 3f       	cpi	r21, 0xFF	; 255
     7be:	e4 f3       	brlt	.-8      	; 0x7b8 <__divsf3_pse+0x6c>
     7c0:	98 3e       	cpi	r25, 0xE8	; 232
     7c2:	d4 f3       	brlt	.-12     	; 0x7b8 <__divsf3_pse+0x6c>
     7c4:	86 95       	lsr	r24
     7c6:	77 95       	ror	r23
     7c8:	67 95       	ror	r22
     7ca:	b7 95       	ror	r27
     7cc:	f7 95       	ror	r31
     7ce:	9f 5f       	subi	r25, 0xFF	; 255
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <__divsf3_pse+0x78>
     7d2:	88 0f       	add	r24, r24
     7d4:	91 1d       	adc	r25, r1
     7d6:	96 95       	lsr	r25
     7d8:	87 95       	ror	r24
     7da:	97 f9       	bld	r25, 7
     7dc:	08 95       	ret
     7de:	e1 e0       	ldi	r30, 0x01	; 1
     7e0:	66 0f       	add	r22, r22
     7e2:	77 1f       	adc	r23, r23
     7e4:	88 1f       	adc	r24, r24
     7e6:	bb 1f       	adc	r27, r27
     7e8:	62 17       	cp	r22, r18
     7ea:	73 07       	cpc	r23, r19
     7ec:	84 07       	cpc	r24, r20
     7ee:	ba 07       	cpc	r27, r26
     7f0:	20 f0       	brcs	.+8      	; 0x7fa <__divsf3_pse+0xae>
     7f2:	62 1b       	sub	r22, r18
     7f4:	73 0b       	sbc	r23, r19
     7f6:	84 0b       	sbc	r24, r20
     7f8:	ba 0b       	sbc	r27, r26
     7fa:	ee 1f       	adc	r30, r30
     7fc:	88 f7       	brcc	.-30     	; 0x7e0 <__divsf3_pse+0x94>
     7fe:	e0 95       	com	r30
     800:	08 95       	ret

00000802 <__fixsfsi>:
     802:	0e 94 08 04 	call	0x810	; 0x810 <__fixunssfsi>
     806:	68 94       	set
     808:	b1 11       	cpse	r27, r1
     80a:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     80e:	08 95       	ret

00000810 <__fixunssfsi>:
     810:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
     814:	88 f0       	brcs	.+34     	; 0x838 <__fixunssfsi+0x28>
     816:	9f 57       	subi	r25, 0x7F	; 127
     818:	98 f0       	brcs	.+38     	; 0x840 <__fixunssfsi+0x30>
     81a:	b9 2f       	mov	r27, r25
     81c:	99 27       	eor	r25, r25
     81e:	b7 51       	subi	r27, 0x17	; 23
     820:	b0 f0       	brcs	.+44     	; 0x84e <__fixunssfsi+0x3e>
     822:	e1 f0       	breq	.+56     	; 0x85c <__fixunssfsi+0x4c>
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	88 1f       	adc	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	1a f0       	brmi	.+6      	; 0x834 <__fixunssfsi+0x24>
     82e:	ba 95       	dec	r27
     830:	c9 f7       	brne	.-14     	; 0x824 <__fixunssfsi+0x14>
     832:	14 c0       	rjmp	.+40     	; 0x85c <__fixunssfsi+0x4c>
     834:	b1 30       	cpi	r27, 0x01	; 1
     836:	91 f0       	breq	.+36     	; 0x85c <__fixunssfsi+0x4c>
     838:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_zero>
     83c:	b1 e0       	ldi	r27, 0x01	; 1
     83e:	08 95       	ret
     840:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     844:	67 2f       	mov	r22, r23
     846:	78 2f       	mov	r23, r24
     848:	88 27       	eor	r24, r24
     84a:	b8 5f       	subi	r27, 0xF8	; 248
     84c:	39 f0       	breq	.+14     	; 0x85c <__fixunssfsi+0x4c>
     84e:	b9 3f       	cpi	r27, 0xF9	; 249
     850:	cc f3       	brlt	.-14     	; 0x844 <__fixunssfsi+0x34>
     852:	86 95       	lsr	r24
     854:	77 95       	ror	r23
     856:	67 95       	ror	r22
     858:	b3 95       	inc	r27
     85a:	d9 f7       	brne	.-10     	; 0x852 <__fixunssfsi+0x42>
     85c:	3e f4       	brtc	.+14     	; 0x86c <__stack+0xd>
     85e:	90 95       	com	r25
     860:	80 95       	com	r24
     862:	70 95       	com	r23
     864:	61 95       	neg	r22
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	8f 4f       	sbci	r24, 0xFF	; 255
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	08 95       	ret

0000086e <__floatunsisf>:
     86e:	e8 94       	clt
     870:	09 c0       	rjmp	.+18     	; 0x884 <__floatsisf+0x12>

00000872 <__floatsisf>:
     872:	97 fb       	bst	r25, 7
     874:	3e f4       	brtc	.+14     	; 0x884 <__floatsisf+0x12>
     876:	90 95       	com	r25
     878:	80 95       	com	r24
     87a:	70 95       	com	r23
     87c:	61 95       	neg	r22
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	8f 4f       	sbci	r24, 0xFF	; 255
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	99 23       	and	r25, r25
     886:	a9 f0       	breq	.+42     	; 0x8b2 <__floatsisf+0x40>
     888:	f9 2f       	mov	r31, r25
     88a:	96 e9       	ldi	r25, 0x96	; 150
     88c:	bb 27       	eor	r27, r27
     88e:	93 95       	inc	r25
     890:	f6 95       	lsr	r31
     892:	87 95       	ror	r24
     894:	77 95       	ror	r23
     896:	67 95       	ror	r22
     898:	b7 95       	ror	r27
     89a:	f1 11       	cpse	r31, r1
     89c:	f8 cf       	rjmp	.-16     	; 0x88e <__floatsisf+0x1c>
     89e:	fa f4       	brpl	.+62     	; 0x8de <__floatsisf+0x6c>
     8a0:	bb 0f       	add	r27, r27
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <__floatsisf+0x36>
     8a4:	60 ff       	sbrs	r22, 0
     8a6:	1b c0       	rjmp	.+54     	; 0x8de <__floatsisf+0x6c>
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	8f 4f       	sbci	r24, 0xFF	; 255
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	16 c0       	rjmp	.+44     	; 0x8de <__floatsisf+0x6c>
     8b2:	88 23       	and	r24, r24
     8b4:	11 f0       	breq	.+4      	; 0x8ba <__floatsisf+0x48>
     8b6:	96 e9       	ldi	r25, 0x96	; 150
     8b8:	11 c0       	rjmp	.+34     	; 0x8dc <__floatsisf+0x6a>
     8ba:	77 23       	and	r23, r23
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <__floatsisf+0x54>
     8be:	9e e8       	ldi	r25, 0x8E	; 142
     8c0:	87 2f       	mov	r24, r23
     8c2:	76 2f       	mov	r23, r22
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__floatsisf+0x5e>
     8c6:	66 23       	and	r22, r22
     8c8:	71 f0       	breq	.+28     	; 0x8e6 <__floatsisf+0x74>
     8ca:	96 e8       	ldi	r25, 0x86	; 134
     8cc:	86 2f       	mov	r24, r22
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	2a f0       	brmi	.+10     	; 0x8de <__floatsisf+0x6c>
     8d4:	9a 95       	dec	r25
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	88 1f       	adc	r24, r24
     8dc:	da f7       	brpl	.-10     	; 0x8d4 <__floatsisf+0x62>
     8de:	88 0f       	add	r24, r24
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	97 f9       	bld	r25, 7
     8e6:	08 95       	ret

000008e8 <__fp_cmp>:
     8e8:	99 0f       	add	r25, r25
     8ea:	00 08       	sbc	r0, r0
     8ec:	55 0f       	add	r21, r21
     8ee:	aa 0b       	sbc	r26, r26
     8f0:	e0 e8       	ldi	r30, 0x80	; 128
     8f2:	fe ef       	ldi	r31, 0xFE	; 254
     8f4:	16 16       	cp	r1, r22
     8f6:	17 06       	cpc	r1, r23
     8f8:	e8 07       	cpc	r30, r24
     8fa:	f9 07       	cpc	r31, r25
     8fc:	c0 f0       	brcs	.+48     	; 0x92e <__fp_cmp+0x46>
     8fe:	12 16       	cp	r1, r18
     900:	13 06       	cpc	r1, r19
     902:	e4 07       	cpc	r30, r20
     904:	f5 07       	cpc	r31, r21
     906:	98 f0       	brcs	.+38     	; 0x92e <__fp_cmp+0x46>
     908:	62 1b       	sub	r22, r18
     90a:	73 0b       	sbc	r23, r19
     90c:	84 0b       	sbc	r24, r20
     90e:	95 0b       	sbc	r25, r21
     910:	39 f4       	brne	.+14     	; 0x920 <__fp_cmp+0x38>
     912:	0a 26       	eor	r0, r26
     914:	61 f0       	breq	.+24     	; 0x92e <__fp_cmp+0x46>
     916:	23 2b       	or	r18, r19
     918:	24 2b       	or	r18, r20
     91a:	25 2b       	or	r18, r21
     91c:	21 f4       	brne	.+8      	; 0x926 <__fp_cmp+0x3e>
     91e:	08 95       	ret
     920:	0a 26       	eor	r0, r26
     922:	09 f4       	brne	.+2      	; 0x926 <__fp_cmp+0x3e>
     924:	a1 40       	sbci	r26, 0x01	; 1
     926:	a6 95       	lsr	r26
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	81 1d       	adc	r24, r1
     92c:	81 1d       	adc	r24, r1
     92e:	08 95       	ret

00000930 <__fp_inf>:
     930:	97 f9       	bld	r25, 7
     932:	9f 67       	ori	r25, 0x7F	; 127
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	08 95       	ret

0000093c <__fp_nan>:
     93c:	9f ef       	ldi	r25, 0xFF	; 255
     93e:	80 ec       	ldi	r24, 0xC0	; 192
     940:	08 95       	ret

00000942 <__fp_pscA>:
     942:	00 24       	eor	r0, r0
     944:	0a 94       	dec	r0
     946:	16 16       	cp	r1, r22
     948:	17 06       	cpc	r1, r23
     94a:	18 06       	cpc	r1, r24
     94c:	09 06       	cpc	r0, r25
     94e:	08 95       	ret

00000950 <__fp_pscB>:
     950:	00 24       	eor	r0, r0
     952:	0a 94       	dec	r0
     954:	12 16       	cp	r1, r18
     956:	13 06       	cpc	r1, r19
     958:	14 06       	cpc	r1, r20
     95a:	05 06       	cpc	r0, r21
     95c:	08 95       	ret

0000095e <__fp_round>:
     95e:	09 2e       	mov	r0, r25
     960:	03 94       	inc	r0
     962:	00 0c       	add	r0, r0
     964:	11 f4       	brne	.+4      	; 0x96a <__fp_round+0xc>
     966:	88 23       	and	r24, r24
     968:	52 f0       	brmi	.+20     	; 0x97e <__fp_round+0x20>
     96a:	bb 0f       	add	r27, r27
     96c:	40 f4       	brcc	.+16     	; 0x97e <__fp_round+0x20>
     96e:	bf 2b       	or	r27, r31
     970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0x18>
     972:	60 ff       	sbrs	r22, 0
     974:	04 c0       	rjmp	.+8      	; 0x97e <__fp_round+0x20>
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	8f 4f       	sbci	r24, 0xFF	; 255
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	08 95       	ret

00000980 <__fp_split3>:
     980:	57 fd       	sbrc	r21, 7
     982:	90 58       	subi	r25, 0x80	; 128
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	59 f0       	breq	.+22     	; 0x9a0 <__fp_splitA+0x10>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	71 f0       	breq	.+28     	; 0x9aa <__fp_splitA+0x1a>
     98e:	47 95       	ror	r20

00000990 <__fp_splitA>:
     990:	88 0f       	add	r24, r24
     992:	97 fb       	bst	r25, 7
     994:	99 1f       	adc	r25, r25
     996:	61 f0       	breq	.+24     	; 0x9b0 <__fp_splitA+0x20>
     998:	9f 3f       	cpi	r25, 0xFF	; 255
     99a:	79 f0       	breq	.+30     	; 0x9ba <__fp_splitA+0x2a>
     99c:	87 95       	ror	r24
     99e:	08 95       	ret
     9a0:	12 16       	cp	r1, r18
     9a2:	13 06       	cpc	r1, r19
     9a4:	14 06       	cpc	r1, r20
     9a6:	55 1f       	adc	r21, r21
     9a8:	f2 cf       	rjmp	.-28     	; 0x98e <__fp_split3+0xe>
     9aa:	46 95       	lsr	r20
     9ac:	f1 df       	rcall	.-30     	; 0x990 <__fp_splitA>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__fp_splitA+0x30>
     9b0:	16 16       	cp	r1, r22
     9b2:	17 06       	cpc	r1, r23
     9b4:	18 06       	cpc	r1, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	f1 cf       	rjmp	.-30     	; 0x99c <__fp_splitA+0xc>
     9ba:	86 95       	lsr	r24
     9bc:	71 05       	cpc	r23, r1
     9be:	61 05       	cpc	r22, r1
     9c0:	08 94       	sec
     9c2:	08 95       	ret

000009c4 <__fp_zero>:
     9c4:	e8 94       	clt

000009c6 <__fp_szero>:
     9c6:	bb 27       	eor	r27, r27
     9c8:	66 27       	eor	r22, r22
     9ca:	77 27       	eor	r23, r23
     9cc:	cb 01       	movw	r24, r22
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret

000009d2 <__mulsf3>:
     9d2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3x>
     9d6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     9da:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     9de:	38 f0       	brcs	.+14     	; 0x9ee <__mulsf3+0x1c>
     9e0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     9e4:	20 f0       	brcs	.+8      	; 0x9ee <__mulsf3+0x1c>
     9e6:	95 23       	and	r25, r21
     9e8:	11 f0       	breq	.+4      	; 0x9ee <__mulsf3+0x1c>
     9ea:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     9ee:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
     9f2:	11 24       	eor	r1, r1
     9f4:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>

000009f8 <__mulsf3x>:
     9f8:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     9fc:	70 f3       	brcs	.-36     	; 0x9da <__mulsf3+0x8>

000009fe <__mulsf3_pse>:
     9fe:	95 9f       	mul	r25, r21
     a00:	c1 f3       	breq	.-16     	; 0x9f2 <__mulsf3+0x20>
     a02:	95 0f       	add	r25, r21
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	55 1f       	adc	r21, r21
     a08:	62 9f       	mul	r22, r18
     a0a:	f0 01       	movw	r30, r0
     a0c:	72 9f       	mul	r23, r18
     a0e:	bb 27       	eor	r27, r27
     a10:	f0 0d       	add	r31, r0
     a12:	b1 1d       	adc	r27, r1
     a14:	63 9f       	mul	r22, r19
     a16:	aa 27       	eor	r26, r26
     a18:	f0 0d       	add	r31, r0
     a1a:	b1 1d       	adc	r27, r1
     a1c:	aa 1f       	adc	r26, r26
     a1e:	64 9f       	mul	r22, r20
     a20:	66 27       	eor	r22, r22
     a22:	b0 0d       	add	r27, r0
     a24:	a1 1d       	adc	r26, r1
     a26:	66 1f       	adc	r22, r22
     a28:	82 9f       	mul	r24, r18
     a2a:	22 27       	eor	r18, r18
     a2c:	b0 0d       	add	r27, r0
     a2e:	a1 1d       	adc	r26, r1
     a30:	62 1f       	adc	r22, r18
     a32:	73 9f       	mul	r23, r19
     a34:	b0 0d       	add	r27, r0
     a36:	a1 1d       	adc	r26, r1
     a38:	62 1f       	adc	r22, r18
     a3a:	83 9f       	mul	r24, r19
     a3c:	a0 0d       	add	r26, r0
     a3e:	61 1d       	adc	r22, r1
     a40:	22 1f       	adc	r18, r18
     a42:	74 9f       	mul	r23, r20
     a44:	33 27       	eor	r19, r19
     a46:	a0 0d       	add	r26, r0
     a48:	61 1d       	adc	r22, r1
     a4a:	23 1f       	adc	r18, r19
     a4c:	84 9f       	mul	r24, r20
     a4e:	60 0d       	add	r22, r0
     a50:	21 1d       	adc	r18, r1
     a52:	82 2f       	mov	r24, r18
     a54:	76 2f       	mov	r23, r22
     a56:	6a 2f       	mov	r22, r26
     a58:	11 24       	eor	r1, r1
     a5a:	9f 57       	subi	r25, 0x7F	; 127
     a5c:	50 40       	sbci	r21, 0x00	; 0
     a5e:	9a f0       	brmi	.+38     	; 0xa86 <__mulsf3_pse+0x88>
     a60:	f1 f0       	breq	.+60     	; 0xa9e <__mulsf3_pse+0xa0>
     a62:	88 23       	and	r24, r24
     a64:	4a f0       	brmi	.+18     	; 0xa78 <__mulsf3_pse+0x7a>
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	bb 1f       	adc	r27, r27
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	88 1f       	adc	r24, r24
     a72:	91 50       	subi	r25, 0x01	; 1
     a74:	50 40       	sbci	r21, 0x00	; 0
     a76:	a9 f7       	brne	.-22     	; 0xa62 <__mulsf3_pse+0x64>
     a78:	9e 3f       	cpi	r25, 0xFE	; 254
     a7a:	51 05       	cpc	r21, r1
     a7c:	80 f0       	brcs	.+32     	; 0xa9e <__mulsf3_pse+0xa0>
     a7e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     a82:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     a86:	5f 3f       	cpi	r21, 0xFF	; 255
     a88:	e4 f3       	brlt	.-8      	; 0xa82 <__mulsf3_pse+0x84>
     a8a:	98 3e       	cpi	r25, 0xE8	; 232
     a8c:	d4 f3       	brlt	.-12     	; 0xa82 <__mulsf3_pse+0x84>
     a8e:	86 95       	lsr	r24
     a90:	77 95       	ror	r23
     a92:	67 95       	ror	r22
     a94:	b7 95       	ror	r27
     a96:	f7 95       	ror	r31
     a98:	e7 95       	ror	r30
     a9a:	9f 5f       	subi	r25, 0xFF	; 255
     a9c:	c1 f7       	brne	.-16     	; 0xa8e <__mulsf3_pse+0x90>
     a9e:	fe 2b       	or	r31, r30
     aa0:	88 0f       	add	r24, r24
     aa2:	91 1d       	adc	r25, r1
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <sprintf>:
     aac:	ae e0       	ldi	r26, 0x0E	; 14
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	ec e5       	ldi	r30, 0x5C	; 92
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	0c 94 17 08 	jmp	0x102e	; 0x102e <__prologue_saves__+0x1c>
     ab8:	0d 89       	ldd	r16, Y+21	; 0x15
     aba:	1e 89       	ldd	r17, Y+22	; 0x16
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	8c 83       	std	Y+4, r24	; 0x04
     ac0:	1a 83       	std	Y+2, r17	; 0x02
     ac2:	09 83       	std	Y+1, r16	; 0x01
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f e7       	ldi	r25, 0x7F	; 127
     ac8:	9e 83       	std	Y+6, r25	; 0x06
     aca:	8d 83       	std	Y+5, r24	; 0x05
     acc:	ae 01       	movw	r20, r28
     ace:	47 5e       	subi	r20, 0xE7	; 231
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	6f 89       	ldd	r22, Y+23	; 0x17
     ad4:	78 8d       	ldd	r23, Y+24	; 0x18
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	0e 94 78 05 	call	0xaf0	; 0xaf0 <vfprintf>
     ade:	ef 81       	ldd	r30, Y+7	; 0x07
     ae0:	f8 85       	ldd	r31, Y+8	; 0x08
     ae2:	e0 0f       	add	r30, r16
     ae4:	f1 1f       	adc	r31, r17
     ae6:	10 82       	st	Z, r1
     ae8:	2e 96       	adiw	r28, 0x0e	; 14
     aea:	e4 e0       	ldi	r30, 0x04	; 4
     aec:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__epilogue_restores__+0x1c>

00000af0 <vfprintf>:
     af0:	ab e0       	ldi	r26, 0x0B	; 11
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__prologue_saves__>
     afc:	6c 01       	movw	r12, r24
     afe:	7b 01       	movw	r14, r22
     b00:	8a 01       	movw	r16, r20
     b02:	fc 01       	movw	r30, r24
     b04:	17 82       	std	Z+7, r1	; 0x07
     b06:	16 82       	std	Z+6, r1	; 0x06
     b08:	83 81       	ldd	r24, Z+3	; 0x03
     b0a:	81 ff       	sbrs	r24, 1
     b0c:	cc c1       	rjmp	.+920    	; 0xea6 <vfprintf+0x3b6>
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	3c 01       	movw	r6, r24
     b14:	f6 01       	movw	r30, r12
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	f7 01       	movw	r30, r14
     b1a:	93 fd       	sbrc	r25, 3
     b1c:	85 91       	lpm	r24, Z+
     b1e:	93 ff       	sbrs	r25, 3
     b20:	81 91       	ld	r24, Z+
     b22:	7f 01       	movw	r14, r30
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <vfprintf+0x3a>
     b28:	ba c1       	rjmp	.+884    	; 0xe9e <vfprintf+0x3ae>
     b2a:	85 32       	cpi	r24, 0x25	; 37
     b2c:	39 f4       	brne	.+14     	; 0xb3c <vfprintf+0x4c>
     b2e:	93 fd       	sbrc	r25, 3
     b30:	85 91       	lpm	r24, Z+
     b32:	93 ff       	sbrs	r25, 3
     b34:	81 91       	ld	r24, Z+
     b36:	7f 01       	movw	r14, r30
     b38:	85 32       	cpi	r24, 0x25	; 37
     b3a:	29 f4       	brne	.+10     	; 0xb46 <vfprintf+0x56>
     b3c:	b6 01       	movw	r22, r12
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     b44:	e7 cf       	rjmp	.-50     	; 0xb14 <vfprintf+0x24>
     b46:	91 2c       	mov	r9, r1
     b48:	21 2c       	mov	r2, r1
     b4a:	31 2c       	mov	r3, r1
     b4c:	ff e1       	ldi	r31, 0x1F	; 31
     b4e:	f3 15       	cp	r31, r3
     b50:	d8 f0       	brcs	.+54     	; 0xb88 <vfprintf+0x98>
     b52:	8b 32       	cpi	r24, 0x2B	; 43
     b54:	79 f0       	breq	.+30     	; 0xb74 <vfprintf+0x84>
     b56:	38 f4       	brcc	.+14     	; 0xb66 <vfprintf+0x76>
     b58:	80 32       	cpi	r24, 0x20	; 32
     b5a:	79 f0       	breq	.+30     	; 0xb7a <vfprintf+0x8a>
     b5c:	83 32       	cpi	r24, 0x23	; 35
     b5e:	a1 f4       	brne	.+40     	; 0xb88 <vfprintf+0x98>
     b60:	23 2d       	mov	r18, r3
     b62:	20 61       	ori	r18, 0x10	; 16
     b64:	1d c0       	rjmp	.+58     	; 0xba0 <vfprintf+0xb0>
     b66:	8d 32       	cpi	r24, 0x2D	; 45
     b68:	61 f0       	breq	.+24     	; 0xb82 <vfprintf+0x92>
     b6a:	80 33       	cpi	r24, 0x30	; 48
     b6c:	69 f4       	brne	.+26     	; 0xb88 <vfprintf+0x98>
     b6e:	23 2d       	mov	r18, r3
     b70:	21 60       	ori	r18, 0x01	; 1
     b72:	16 c0       	rjmp	.+44     	; 0xba0 <vfprintf+0xb0>
     b74:	83 2d       	mov	r24, r3
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	38 2e       	mov	r3, r24
     b7a:	e3 2d       	mov	r30, r3
     b7c:	e4 60       	ori	r30, 0x04	; 4
     b7e:	3e 2e       	mov	r3, r30
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <vfprintf+0xe6>
     b82:	f3 2d       	mov	r31, r3
     b84:	f8 60       	ori	r31, 0x08	; 8
     b86:	1d c0       	rjmp	.+58     	; 0xbc2 <vfprintf+0xd2>
     b88:	37 fc       	sbrc	r3, 7
     b8a:	2d c0       	rjmp	.+90     	; 0xbe6 <vfprintf+0xf6>
     b8c:	20 ed       	ldi	r18, 0xD0	; 208
     b8e:	28 0f       	add	r18, r24
     b90:	2a 30       	cpi	r18, 0x0A	; 10
     b92:	40 f0       	brcs	.+16     	; 0xba4 <vfprintf+0xb4>
     b94:	8e 32       	cpi	r24, 0x2E	; 46
     b96:	b9 f4       	brne	.+46     	; 0xbc6 <vfprintf+0xd6>
     b98:	36 fc       	sbrc	r3, 6
     b9a:	81 c1       	rjmp	.+770    	; 0xe9e <vfprintf+0x3ae>
     b9c:	23 2d       	mov	r18, r3
     b9e:	20 64       	ori	r18, 0x40	; 64
     ba0:	32 2e       	mov	r3, r18
     ba2:	19 c0       	rjmp	.+50     	; 0xbd6 <vfprintf+0xe6>
     ba4:	36 fe       	sbrs	r3, 6
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vfprintf+0xc4>
     ba8:	8a e0       	ldi	r24, 0x0A	; 10
     baa:	98 9e       	mul	r9, r24
     bac:	20 0d       	add	r18, r0
     bae:	11 24       	eor	r1, r1
     bb0:	92 2e       	mov	r9, r18
     bb2:	11 c0       	rjmp	.+34     	; 0xbd6 <vfprintf+0xe6>
     bb4:	ea e0       	ldi	r30, 0x0A	; 10
     bb6:	2e 9e       	mul	r2, r30
     bb8:	20 0d       	add	r18, r0
     bba:	11 24       	eor	r1, r1
     bbc:	22 2e       	mov	r2, r18
     bbe:	f3 2d       	mov	r31, r3
     bc0:	f0 62       	ori	r31, 0x20	; 32
     bc2:	3f 2e       	mov	r3, r31
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <vfprintf+0xe6>
     bc6:	8c 36       	cpi	r24, 0x6C	; 108
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <vfprintf+0xe2>
     bca:	83 2d       	mov	r24, r3
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	38 2e       	mov	r3, r24
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0xe6>
     bd2:	88 36       	cpi	r24, 0x68	; 104
     bd4:	41 f4       	brne	.+16     	; 0xbe6 <vfprintf+0xf6>
     bd6:	f7 01       	movw	r30, r14
     bd8:	93 fd       	sbrc	r25, 3
     bda:	85 91       	lpm	r24, Z+
     bdc:	93 ff       	sbrs	r25, 3
     bde:	81 91       	ld	r24, Z+
     be0:	7f 01       	movw	r14, r30
     be2:	81 11       	cpse	r24, r1
     be4:	b3 cf       	rjmp	.-154    	; 0xb4c <vfprintf+0x5c>
     be6:	98 2f       	mov	r25, r24
     be8:	9f 7d       	andi	r25, 0xDF	; 223
     bea:	95 54       	subi	r25, 0x45	; 69
     bec:	93 30       	cpi	r25, 0x03	; 3
     bee:	28 f4       	brcc	.+10     	; 0xbfa <vfprintf+0x10a>
     bf0:	0c 5f       	subi	r16, 0xFC	; 252
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	9f e3       	ldi	r25, 0x3F	; 63
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <vfprintf+0x124>
     bfa:	83 36       	cpi	r24, 0x63	; 99
     bfc:	31 f0       	breq	.+12     	; 0xc0a <vfprintf+0x11a>
     bfe:	83 37       	cpi	r24, 0x73	; 115
     c00:	71 f0       	breq	.+28     	; 0xc1e <vfprintf+0x12e>
     c02:	83 35       	cpi	r24, 0x53	; 83
     c04:	09 f0       	breq	.+2      	; 0xc08 <vfprintf+0x118>
     c06:	59 c0       	rjmp	.+178    	; 0xcba <vfprintf+0x1ca>
     c08:	21 c0       	rjmp	.+66     	; 0xc4c <vfprintf+0x15c>
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 81       	ld	r24, Z
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	0e 5f       	subi	r16, 0xFE	; 254
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	88 24       	eor	r8, r8
     c16:	83 94       	inc	r8
     c18:	91 2c       	mov	r9, r1
     c1a:	53 01       	movw	r10, r6
     c1c:	13 c0       	rjmp	.+38     	; 0xc44 <vfprintf+0x154>
     c1e:	28 01       	movw	r4, r16
     c20:	f2 e0       	ldi	r31, 0x02	; 2
     c22:	4f 0e       	add	r4, r31
     c24:	51 1c       	adc	r5, r1
     c26:	f8 01       	movw	r30, r16
     c28:	a0 80       	ld	r10, Z
     c2a:	b1 80       	ldd	r11, Z+1	; 0x01
     c2c:	36 fe       	sbrs	r3, 6
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <vfprintf+0x146>
     c30:	69 2d       	mov	r22, r9
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x14a>
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	7f ef       	ldi	r23, 0xFF	; 255
     c3a:	c5 01       	movw	r24, r10
     c3c:	0e 94 64 07 	call	0xec8	; 0xec8 <strnlen>
     c40:	4c 01       	movw	r8, r24
     c42:	82 01       	movw	r16, r4
     c44:	f3 2d       	mov	r31, r3
     c46:	ff 77       	andi	r31, 0x7F	; 127
     c48:	3f 2e       	mov	r3, r31
     c4a:	16 c0       	rjmp	.+44     	; 0xc78 <vfprintf+0x188>
     c4c:	28 01       	movw	r4, r16
     c4e:	22 e0       	ldi	r18, 0x02	; 2
     c50:	42 0e       	add	r4, r18
     c52:	51 1c       	adc	r5, r1
     c54:	f8 01       	movw	r30, r16
     c56:	a0 80       	ld	r10, Z
     c58:	b1 80       	ldd	r11, Z+1	; 0x01
     c5a:	36 fe       	sbrs	r3, 6
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <vfprintf+0x174>
     c5e:	69 2d       	mov	r22, r9
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <vfprintf+0x178>
     c64:	6f ef       	ldi	r22, 0xFF	; 255
     c66:	7f ef       	ldi	r23, 0xFF	; 255
     c68:	c5 01       	movw	r24, r10
     c6a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <strnlen_P>
     c6e:	4c 01       	movw	r8, r24
     c70:	f3 2d       	mov	r31, r3
     c72:	f0 68       	ori	r31, 0x80	; 128
     c74:	3f 2e       	mov	r3, r31
     c76:	82 01       	movw	r16, r4
     c78:	33 fc       	sbrc	r3, 3
     c7a:	1b c0       	rjmp	.+54     	; 0xcb2 <vfprintf+0x1c2>
     c7c:	82 2d       	mov	r24, r2
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	88 16       	cp	r8, r24
     c82:	99 06       	cpc	r9, r25
     c84:	b0 f4       	brcc	.+44     	; 0xcb2 <vfprintf+0x1c2>
     c86:	b6 01       	movw	r22, r12
     c88:	80 e2       	ldi	r24, 0x20	; 32
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     c90:	2a 94       	dec	r2
     c92:	f4 cf       	rjmp	.-24     	; 0xc7c <vfprintf+0x18c>
     c94:	f5 01       	movw	r30, r10
     c96:	37 fc       	sbrc	r3, 7
     c98:	85 91       	lpm	r24, Z+
     c9a:	37 fe       	sbrs	r3, 7
     c9c:	81 91       	ld	r24, Z+
     c9e:	5f 01       	movw	r10, r30
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     ca8:	21 10       	cpse	r2, r1
     caa:	2a 94       	dec	r2
     cac:	21 e0       	ldi	r18, 0x01	; 1
     cae:	82 1a       	sub	r8, r18
     cb0:	91 08       	sbc	r9, r1
     cb2:	81 14       	cp	r8, r1
     cb4:	91 04       	cpc	r9, r1
     cb6:	71 f7       	brne	.-36     	; 0xc94 <vfprintf+0x1a4>
     cb8:	e8 c0       	rjmp	.+464    	; 0xe8a <vfprintf+0x39a>
     cba:	84 36       	cpi	r24, 0x64	; 100
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <vfprintf+0x1d2>
     cbe:	89 36       	cpi	r24, 0x69	; 105
     cc0:	41 f5       	brne	.+80     	; 0xd12 <vfprintf+0x222>
     cc2:	f8 01       	movw	r30, r16
     cc4:	37 fe       	sbrs	r3, 7
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <vfprintf+0x1e6>
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	0c 5f       	subi	r16, 0xFC	; 252
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <vfprintf+0x1f6>
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	07 2e       	mov	r0, r23
     cdc:	00 0c       	add	r0, r0
     cde:	88 0b       	sbc	r24, r24
     ce0:	99 0b       	sbc	r25, r25
     ce2:	0e 5f       	subi	r16, 0xFE	; 254
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	f3 2d       	mov	r31, r3
     ce8:	ff 76       	andi	r31, 0x6F	; 111
     cea:	3f 2e       	mov	r3, r31
     cec:	97 ff       	sbrs	r25, 7
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x212>
     cf0:	90 95       	com	r25
     cf2:	80 95       	com	r24
     cf4:	70 95       	com	r23
     cf6:	61 95       	neg	r22
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	8f 4f       	sbci	r24, 0xFF	; 255
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	f0 68       	ori	r31, 0x80	; 128
     d00:	3f 2e       	mov	r3, r31
     d02:	2a e0       	ldi	r18, 0x0A	; 10
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	a3 01       	movw	r20, r6
     d08:	0e 94 ab 07 	call	0xf56	; 0xf56 <__ultoa_invert>
     d0c:	88 2e       	mov	r8, r24
     d0e:	86 18       	sub	r8, r6
     d10:	45 c0       	rjmp	.+138    	; 0xd9c <vfprintf+0x2ac>
     d12:	85 37       	cpi	r24, 0x75	; 117
     d14:	31 f4       	brne	.+12     	; 0xd22 <vfprintf+0x232>
     d16:	23 2d       	mov	r18, r3
     d18:	2f 7e       	andi	r18, 0xEF	; 239
     d1a:	b2 2e       	mov	r11, r18
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	25 c0       	rjmp	.+74     	; 0xd6c <vfprintf+0x27c>
     d22:	93 2d       	mov	r25, r3
     d24:	99 7f       	andi	r25, 0xF9	; 249
     d26:	b9 2e       	mov	r11, r25
     d28:	8f 36       	cpi	r24, 0x6F	; 111
     d2a:	c1 f0       	breq	.+48     	; 0xd5c <vfprintf+0x26c>
     d2c:	18 f4       	brcc	.+6      	; 0xd34 <vfprintf+0x244>
     d2e:	88 35       	cpi	r24, 0x58	; 88
     d30:	79 f0       	breq	.+30     	; 0xd50 <vfprintf+0x260>
     d32:	b5 c0       	rjmp	.+362    	; 0xe9e <vfprintf+0x3ae>
     d34:	80 37       	cpi	r24, 0x70	; 112
     d36:	19 f0       	breq	.+6      	; 0xd3e <vfprintf+0x24e>
     d38:	88 37       	cpi	r24, 0x78	; 120
     d3a:	21 f0       	breq	.+8      	; 0xd44 <vfprintf+0x254>
     d3c:	b0 c0       	rjmp	.+352    	; 0xe9e <vfprintf+0x3ae>
     d3e:	e9 2f       	mov	r30, r25
     d40:	e0 61       	ori	r30, 0x10	; 16
     d42:	be 2e       	mov	r11, r30
     d44:	b4 fe       	sbrs	r11, 4
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <vfprintf+0x272>
     d48:	fb 2d       	mov	r31, r11
     d4a:	f4 60       	ori	r31, 0x04	; 4
     d4c:	bf 2e       	mov	r11, r31
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <vfprintf+0x272>
     d50:	34 fe       	sbrs	r3, 4
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <vfprintf+0x278>
     d54:	29 2f       	mov	r18, r25
     d56:	26 60       	ori	r18, 0x06	; 6
     d58:	b2 2e       	mov	r11, r18
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <vfprintf+0x278>
     d5c:	28 e0       	ldi	r18, 0x08	; 8
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <vfprintf+0x27c>
     d62:	20 e1       	ldi	r18, 0x10	; 16
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x27c>
     d68:	20 e1       	ldi	r18, 0x10	; 16
     d6a:	32 e0       	ldi	r19, 0x02	; 2
     d6c:	f8 01       	movw	r30, r16
     d6e:	b7 fe       	sbrs	r11, 7
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <vfprintf+0x290>
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	0c 5f       	subi	r16, 0xFC	; 252
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <vfprintf+0x29c>
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 5f       	subi	r16, 0xFE	; 254
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	a3 01       	movw	r20, r6
     d8e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__ultoa_invert>
     d92:	88 2e       	mov	r8, r24
     d94:	86 18       	sub	r8, r6
     d96:	fb 2d       	mov	r31, r11
     d98:	ff 77       	andi	r31, 0x7F	; 127
     d9a:	3f 2e       	mov	r3, r31
     d9c:	36 fe       	sbrs	r3, 6
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <vfprintf+0x2ca>
     da0:	23 2d       	mov	r18, r3
     da2:	2e 7f       	andi	r18, 0xFE	; 254
     da4:	a2 2e       	mov	r10, r18
     da6:	89 14       	cp	r8, r9
     da8:	58 f4       	brcc	.+22     	; 0xdc0 <vfprintf+0x2d0>
     daa:	34 fe       	sbrs	r3, 4
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <vfprintf+0x2d4>
     dae:	32 fc       	sbrc	r3, 2
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <vfprintf+0x2d4>
     db2:	83 2d       	mov	r24, r3
     db4:	8e 7e       	andi	r24, 0xEE	; 238
     db6:	a8 2e       	mov	r10, r24
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <vfprintf+0x2d4>
     dba:	b8 2c       	mov	r11, r8
     dbc:	a3 2c       	mov	r10, r3
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <vfprintf+0x2d6>
     dc0:	b8 2c       	mov	r11, r8
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <vfprintf+0x2d6>
     dc4:	b9 2c       	mov	r11, r9
     dc6:	a4 fe       	sbrs	r10, 4
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <vfprintf+0x2f8>
     dca:	fe 01       	movw	r30, r28
     dcc:	e8 0d       	add	r30, r8
     dce:	f1 1d       	adc	r31, r1
     dd0:	80 81       	ld	r24, Z
     dd2:	80 33       	cpi	r24, 0x30	; 48
     dd4:	21 f4       	brne	.+8      	; 0xdde <vfprintf+0x2ee>
     dd6:	9a 2d       	mov	r25, r10
     dd8:	99 7e       	andi	r25, 0xE9	; 233
     dda:	a9 2e       	mov	r10, r25
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <vfprintf+0x300>
     dde:	a2 fe       	sbrs	r10, 2
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x2fe>
     de2:	b3 94       	inc	r11
     de4:	b3 94       	inc	r11
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <vfprintf+0x300>
     de8:	8a 2d       	mov	r24, r10
     dea:	86 78       	andi	r24, 0x86	; 134
     dec:	09 f0       	breq	.+2      	; 0xdf0 <vfprintf+0x300>
     dee:	b3 94       	inc	r11
     df0:	a3 fc       	sbrc	r10, 3
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <vfprintf+0x326>
     df4:	a0 fe       	sbrs	r10, 0
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x314>
     df8:	b2 14       	cp	r11, r2
     dfa:	88 f4       	brcc	.+34     	; 0xe1e <vfprintf+0x32e>
     dfc:	28 0c       	add	r2, r8
     dfe:	92 2c       	mov	r9, r2
     e00:	9b 18       	sub	r9, r11
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <vfprintf+0x330>
     e04:	b2 14       	cp	r11, r2
     e06:	60 f4       	brcc	.+24     	; 0xe20 <vfprintf+0x330>
     e08:	b6 01       	movw	r22, r12
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e12:	b3 94       	inc	r11
     e14:	f7 cf       	rjmp	.-18     	; 0xe04 <vfprintf+0x314>
     e16:	b2 14       	cp	r11, r2
     e18:	18 f4       	brcc	.+6      	; 0xe20 <vfprintf+0x330>
     e1a:	2b 18       	sub	r2, r11
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x332>
     e1e:	98 2c       	mov	r9, r8
     e20:	21 2c       	mov	r2, r1
     e22:	a4 fe       	sbrs	r10, 4
     e24:	10 c0       	rjmp	.+32     	; 0xe46 <vfprintf+0x356>
     e26:	b6 01       	movw	r22, r12
     e28:	80 e3       	ldi	r24, 0x30	; 48
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e30:	a2 fe       	sbrs	r10, 2
     e32:	17 c0       	rjmp	.+46     	; 0xe62 <vfprintf+0x372>
     e34:	a1 fc       	sbrc	r10, 1
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <vfprintf+0x34e>
     e38:	88 e7       	ldi	r24, 0x78	; 120
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x352>
     e3e:	88 e5       	ldi	r24, 0x58	; 88
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	b6 01       	movw	r22, r12
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <vfprintf+0x36e>
     e46:	8a 2d       	mov	r24, r10
     e48:	86 78       	andi	r24, 0x86	; 134
     e4a:	59 f0       	breq	.+22     	; 0xe62 <vfprintf+0x372>
     e4c:	a1 fe       	sbrs	r10, 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x364>
     e50:	8b e2       	ldi	r24, 0x2B	; 43
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x366>
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	a7 fc       	sbrc	r10, 7
     e58:	8d e2       	ldi	r24, 0x2D	; 45
     e5a:	b6 01       	movw	r22, r12
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e62:	89 14       	cp	r8, r9
     e64:	38 f4       	brcc	.+14     	; 0xe74 <vfprintf+0x384>
     e66:	b6 01       	movw	r22, r12
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e70:	9a 94       	dec	r9
     e72:	f7 cf       	rjmp	.-18     	; 0xe62 <vfprintf+0x372>
     e74:	8a 94       	dec	r8
     e76:	f3 01       	movw	r30, r6
     e78:	e8 0d       	add	r30, r8
     e7a:	f1 1d       	adc	r31, r1
     e7c:	80 81       	ld	r24, Z
     e7e:	b6 01       	movw	r22, r12
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e86:	81 10       	cpse	r8, r1
     e88:	f5 cf       	rjmp	.-22     	; 0xe74 <vfprintf+0x384>
     e8a:	22 20       	and	r2, r2
     e8c:	09 f4       	brne	.+2      	; 0xe90 <vfprintf+0x3a0>
     e8e:	42 ce       	rjmp	.-892    	; 0xb14 <vfprintf+0x24>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 6f 07 	call	0xede	; 0xede <fputc>
     e9a:	2a 94       	dec	r2
     e9c:	f6 cf       	rjmp	.-20     	; 0xe8a <vfprintf+0x39a>
     e9e:	f6 01       	movw	r30, r12
     ea0:	86 81       	ldd	r24, Z+6	; 0x06
     ea2:	97 81       	ldd	r25, Z+7	; 0x07
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x3ba>
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	2b 96       	adiw	r28, 0x0b	; 11
     eac:	e2 e1       	ldi	r30, 0x12	; 18
     eae:	0c 94 25 08 	jmp	0x104a	; 0x104a <__epilogue_restores__>

00000eb2 <strnlen_P>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	05 90       	lpm	r0, Z+
     eb6:	61 50       	subi	r22, 0x01	; 1
     eb8:	70 40       	sbci	r23, 0x00	; 0
     eba:	01 10       	cpse	r0, r1
     ebc:	d8 f7       	brcc	.-10     	; 0xeb4 <strnlen_P+0x2>
     ebe:	80 95       	com	r24
     ec0:	90 95       	com	r25
     ec2:	8e 0f       	add	r24, r30
     ec4:	9f 1f       	adc	r25, r31
     ec6:	08 95       	ret

00000ec8 <strnlen>:
     ec8:	fc 01       	movw	r30, r24
     eca:	61 50       	subi	r22, 0x01	; 1
     ecc:	70 40       	sbci	r23, 0x00	; 0
     ece:	01 90       	ld	r0, Z+
     ed0:	01 10       	cpse	r0, r1
     ed2:	d8 f7       	brcc	.-10     	; 0xeca <strnlen+0x2>
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	8e 0f       	add	r24, r30
     eda:	9f 1f       	adc	r25, r31
     edc:	08 95       	ret

00000ede <fputc>:
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	fb 01       	movw	r30, r22
     ee8:	23 81       	ldd	r18, Z+3	; 0x03
     eea:	21 fd       	sbrc	r18, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <fputc+0x16>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	2c c0       	rjmp	.+88     	; 0xf4c <fputc+0x6e>
     ef4:	22 ff       	sbrs	r18, 2
     ef6:	16 c0       	rjmp	.+44     	; 0xf24 <fputc+0x46>
     ef8:	46 81       	ldd	r20, Z+6	; 0x06
     efa:	57 81       	ldd	r21, Z+7	; 0x07
     efc:	24 81       	ldd	r18, Z+4	; 0x04
     efe:	35 81       	ldd	r19, Z+5	; 0x05
     f00:	42 17       	cp	r20, r18
     f02:	53 07       	cpc	r21, r19
     f04:	44 f4       	brge	.+16     	; 0xf16 <fputc+0x38>
     f06:	a0 81       	ld	r26, Z
     f08:	b1 81       	ldd	r27, Z+1	; 0x01
     f0a:	9d 01       	movw	r18, r26
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
     f14:	8c 93       	st	X, r24
     f16:	26 81       	ldd	r18, Z+6	; 0x06
     f18:	37 81       	ldd	r19, Z+7	; 0x07
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	37 83       	std	Z+7, r19	; 0x07
     f20:	26 83       	std	Z+6, r18	; 0x06
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <fputc+0x6e>
     f24:	8b 01       	movw	r16, r22
     f26:	ec 01       	movw	r28, r24
     f28:	fb 01       	movw	r30, r22
     f2a:	00 84       	ldd	r0, Z+8	; 0x08
     f2c:	f1 85       	ldd	r31, Z+9	; 0x09
     f2e:	e0 2d       	mov	r30, r0
     f30:	09 95       	icall
     f32:	89 2b       	or	r24, r25
     f34:	e1 f6       	brne	.-72     	; 0xeee <fputc+0x10>
     f36:	d8 01       	movw	r26, r16
     f38:	16 96       	adiw	r26, 0x06	; 6
     f3a:	8d 91       	ld	r24, X+
     f3c:	9c 91       	ld	r25, X
     f3e:	17 97       	sbiw	r26, 0x07	; 7
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	17 96       	adiw	r26, 0x07	; 7
     f44:	9c 93       	st	X, r25
     f46:	8e 93       	st	-X, r24
     f48:	16 97       	sbiw	r26, 0x06	; 6
     f4a:	ce 01       	movw	r24, r28
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <__ultoa_invert>:
     f56:	fa 01       	movw	r30, r20
     f58:	aa 27       	eor	r26, r26
     f5a:	28 30       	cpi	r18, 0x08	; 8
     f5c:	51 f1       	breq	.+84     	; 0xfb2 <__ultoa_invert+0x5c>
     f5e:	20 31       	cpi	r18, 0x10	; 16
     f60:	81 f1       	breq	.+96     	; 0xfc2 <__ultoa_invert+0x6c>
     f62:	e8 94       	clt
     f64:	6f 93       	push	r22
     f66:	6e 7f       	andi	r22, 0xFE	; 254
     f68:	6e 5f       	subi	r22, 0xFE	; 254
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	af 4f       	sbci	r26, 0xFF	; 255
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	3e d0       	rcall	.+124    	; 0xff2 <__ultoa_invert+0x9c>
     f76:	b4 e0       	ldi	r27, 0x04	; 4
     f78:	3c d0       	rcall	.+120    	; 0xff2 <__ultoa_invert+0x9c>
     f7a:	67 0f       	add	r22, r23
     f7c:	78 1f       	adc	r23, r24
     f7e:	89 1f       	adc	r24, r25
     f80:	9a 1f       	adc	r25, r26
     f82:	a1 1d       	adc	r26, r1
     f84:	68 0f       	add	r22, r24
     f86:	79 1f       	adc	r23, r25
     f88:	8a 1f       	adc	r24, r26
     f8a:	91 1d       	adc	r25, r1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	6a 0f       	add	r22, r26
     f90:	71 1d       	adc	r23, r1
     f92:	81 1d       	adc	r24, r1
     f94:	91 1d       	adc	r25, r1
     f96:	a1 1d       	adc	r26, r1
     f98:	20 d0       	rcall	.+64     	; 0xfda <__ultoa_invert+0x84>
     f9a:	09 f4       	brne	.+2      	; 0xf9e <__ultoa_invert+0x48>
     f9c:	68 94       	set
     f9e:	3f 91       	pop	r19
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	26 9f       	mul	r18, r22
     fa4:	11 24       	eor	r1, r1
     fa6:	30 19       	sub	r19, r0
     fa8:	30 5d       	subi	r19, 0xD0	; 208
     faa:	31 93       	st	Z+, r19
     fac:	de f6       	brtc	.-74     	; 0xf64 <__ultoa_invert+0xe>
     fae:	cf 01       	movw	r24, r30
     fb0:	08 95       	ret
     fb2:	46 2f       	mov	r20, r22
     fb4:	47 70       	andi	r20, 0x07	; 7
     fb6:	40 5d       	subi	r20, 0xD0	; 208
     fb8:	41 93       	st	Z+, r20
     fba:	b3 e0       	ldi	r27, 0x03	; 3
     fbc:	0f d0       	rcall	.+30     	; 0xfdc <__ultoa_invert+0x86>
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__ultoa_invert+0x5c>
     fc0:	f6 cf       	rjmp	.-20     	; 0xfae <__ultoa_invert+0x58>
     fc2:	46 2f       	mov	r20, r22
     fc4:	4f 70       	andi	r20, 0x0F	; 15
     fc6:	40 5d       	subi	r20, 0xD0	; 208
     fc8:	4a 33       	cpi	r20, 0x3A	; 58
     fca:	18 f0       	brcs	.+6      	; 0xfd2 <__ultoa_invert+0x7c>
     fcc:	49 5d       	subi	r20, 0xD9	; 217
     fce:	31 fd       	sbrc	r19, 1
     fd0:	40 52       	subi	r20, 0x20	; 32
     fd2:	41 93       	st	Z+, r20
     fd4:	02 d0       	rcall	.+4      	; 0xfda <__ultoa_invert+0x84>
     fd6:	a9 f7       	brne	.-22     	; 0xfc2 <__ultoa_invert+0x6c>
     fd8:	ea cf       	rjmp	.-44     	; 0xfae <__ultoa_invert+0x58>
     fda:	b4 e0       	ldi	r27, 0x04	; 4
     fdc:	a6 95       	lsr	r26
     fde:	97 95       	ror	r25
     fe0:	87 95       	ror	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	ba 95       	dec	r27
     fe8:	c9 f7       	brne	.-14     	; 0xfdc <__ultoa_invert+0x86>
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	61 05       	cpc	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	08 95       	ret
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	0a 2e       	mov	r0, r26
     ff8:	06 94       	lsr	r0
     ffa:	57 95       	ror	r21
     ffc:	47 95       	ror	r20
     ffe:	37 95       	ror	r19
    1000:	27 95       	ror	r18
    1002:	ba 95       	dec	r27
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0xa2>
    1006:	62 0f       	add	r22, r18
    1008:	73 1f       	adc	r23, r19
    100a:	84 1f       	adc	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	a0 1d       	adc	r26, r0
    1010:	08 95       	ret

00001012 <__prologue_saves__>:
    1012:	2f 92       	push	r2
    1014:	3f 92       	push	r3
    1016:	4f 92       	push	r4
    1018:	5f 92       	push	r5
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	ca 1b       	sub	r28, r26
    103c:	db 0b       	sbc	r29, r27
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	09 94       	ijmp

0000104a <__epilogue_restores__>:
    104a:	2a 88       	ldd	r2, Y+18	; 0x12
    104c:	39 88       	ldd	r3, Y+17	; 0x11
    104e:	48 88       	ldd	r4, Y+16	; 0x10
    1050:	5f 84       	ldd	r5, Y+15	; 0x0f
    1052:	6e 84       	ldd	r6, Y+14	; 0x0e
    1054:	7d 84       	ldd	r7, Y+13	; 0x0d
    1056:	8c 84       	ldd	r8, Y+12	; 0x0c
    1058:	9b 84       	ldd	r9, Y+11	; 0x0b
    105a:	aa 84       	ldd	r10, Y+10	; 0x0a
    105c:	b9 84       	ldd	r11, Y+9	; 0x09
    105e:	c8 84       	ldd	r12, Y+8	; 0x08
    1060:	df 80       	ldd	r13, Y+7	; 0x07
    1062:	ee 80       	ldd	r14, Y+6	; 0x06
    1064:	fd 80       	ldd	r15, Y+5	; 0x05
    1066:	0c 81       	ldd	r16, Y+4	; 0x04
    1068:	1b 81       	ldd	r17, Y+3	; 0x03
    106a:	aa 81       	ldd	r26, Y+2	; 0x02
    106c:	b9 81       	ldd	r27, Y+1	; 0x01
    106e:	ce 0f       	add	r28, r30
    1070:	d1 1d       	adc	r29, r1
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	ed 01       	movw	r28, r26
    107e:	08 95       	ret

00001080 <_exit>:
    1080:	f8 94       	cli

00001082 <__stop_program>:
    1082:	ff cf       	rjmp	.-2      	; 0x1082 <__stop_program>
