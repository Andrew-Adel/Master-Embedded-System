
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000823  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_1>
   8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_2>
   c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  7a:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <INTERRUPT_Init>:

void INTERRUPT_Init()
{
	// ================== direction ==================

	IO_DDRD_R->S_PORT.bit2 = 0;
  82:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <IO_DDRD_R>
  86:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <IO_DDRD_R+0x1>
  8a:	80 81       	ld	r24, Z
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	80 83       	st	Z, r24
	IO_DDRD_R->S_PORT.bit3 = 0;
  90:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <IO_DDRD_R>
  94:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <IO_DDRD_R+0x1>
  98:	80 81       	ld	r24, Z
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	80 83       	st	Z, r24
	IO_DDRD_R->S_PORT.bit5 = 1;
  9e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <IO_DDRD_R>
  a2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <IO_DDRD_R+0x1>
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	80 83       	st	Z, r24
	IO_DDRD_R->S_PORT.bit6 = 1;
  ac:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <IO_DDRD_R>
  b0:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <IO_DDRD_R+0x1>
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	IO_DDRD_R->S_PORT.bit7 = 1;
  ba:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <IO_DDRD_R>
  be:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <IO_DDRD_R+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24

	// ================== sensitivity of INT ==================

	//	INT0: Any logical change
	IO_MCUCR_R->S_PORT.bit0 = 1;
  c8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <IO_MCUCR_R>
  cc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <IO_MCUCR_R+0x1>
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	IO_MCUCR_R->S_PORT.bit1 = 0;
  d6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <IO_MCUCR_R>
  da:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <IO_MCUCR_R+0x1>
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24

	// 	INT1: rising edge
	IO_MCUCR_R->S_PORT.bit2 = 1;
  e4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <IO_MCUCR_R>
  e8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <IO_MCUCR_R+0x1>
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	IO_MCUCR_R->S_PORT.bit3 = 1;
  f2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <IO_MCUCR_R>
  f6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <IO_MCUCR_R+0x1>
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24

	// INT2: falling edge
	IO_MCUCSR_R->S_PORT.bit6 = 0;
 100:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <IO_MCUCSR_R>
 104:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <IO_MCUCSR_R+0x1>
 108:	80 81       	ld	r24, Z
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	80 83       	st	Z, r24

	// ================== enable interrupts ==================

	IO_GICR_R->S_PORT.bit5 = 1;
 10e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <IO_GICR_R>
 112:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <IO_GICR_R+0x1>
 116:	80 81       	ld	r24, Z
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
	IO_GICR_R->S_PORT.bit6 = 1;
 11c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <IO_GICR_R>
 120:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <IO_GICR_R+0x1>
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
	IO_GICR_R->S_PORT.bit7 = 1;
 12a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <IO_GICR_R>
 12e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <IO_GICR_R+0x1>
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 83       	st	Z, r24
	// enable global interrupt
	IO_SREG_R->S_PORT.bit7 = 1;
 138:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <IO_SREG_R>
 13c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <IO_SREG_R+0x1>
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <main>:

}

int main()
{
	INTERRUPT_Init();
 148:	0e 94 41 00 	call	0x82	; 0x82 <INTERRUPT_Init>
	while(1){
		IO_PORTD_R->S_PORT.bit5 = 0;
 14c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	80 81       	ld	r24, Z
 156:	8f 7d       	andi	r24, 0xDF	; 223
 158:	80 83       	st	Z, r24
		IO_PORTD_R->S_PORT.bit6 = 0;
 15a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 81       	ld	r24, Z
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	80 83       	st	Z, r24
		IO_PORTD_R->S_PORT.bit7 = 0;
 168:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 170:	80 81       	ld	r24, Z
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 83       	st	Z, r24
 176:	ea cf       	rjmp	.-44     	; 0x14c <main+0x4>

00000178 <__vector_1>:
	}
}

ISR(INT0_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	IO_PORTD_R->S_PORT.bit5 = 1;
 18c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 194:	80 81       	ld	r24, Z
 196:	80 62       	ori	r24, 0x20	; 32
 198:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	80 e7       	ldi	r24, 0x70	; 112
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <__vector_1+0x28>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <__vector_1+0x32>
 1aa:	00 00       	nop
	_delay_ms(10);
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_2>:

ISR(INT1_vect){
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	IO_PORTD_R->S_PORT.bit6 = 1;
 1d4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	80 e7       	ldi	r24, 0x70	; 112
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__vector_2+0x28>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <__vector_2+0x32>
 1f2:	00 00       	nop
	_delay_ms(10);
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_3>:

ISR(INT2_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	IO_PORTD_R->S_PORT.bit7 = 1;
 21c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	80 83       	st	Z, r24
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <__vector_3+0x28>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__vector_3+0x32>
 23a:	00 00       	nop
	_delay_ms(10);
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
